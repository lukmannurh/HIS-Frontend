// File: ./.env
REACT_APP_API_URL=http://localhost:3000/api
PORT=3001


// File: ./.eslintrc.json
{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/react",
    "plugin:prettier/recommended"
  ],
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "plugins": ["react", "react-hooks", "jsx-a11y", "import", "prettier"],
  "rules": {
    "import/no-unresolved": [
      "error",
      {
        "ignore": ["\\.module\\.css$"]
      }
    ],
    "prettier/prettier": "error",
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
    "import/order": [
      "warn",
      {
        "groups": [["builtin", "external", "internal"]],
        "pathGroups": [
          {
            "pattern": "react",
            "group": "builtin",
            "position": "before"
          }
        ],
        "pathGroupsExcludedImportTypes": ["react"],
        "alphabetize": { "order": "asc", "caseInsensitive": true },
        "newlines-between": "always"
      }
    ],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "jsx-a11y/no-autofocus": "error"
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".json"]
      }
    }
  }
}



// File: ./.gitignore
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules/
/.pnp/
/.pnp.js

# production build
/build/

# testing
/coverage/

# environment variable files (uncomment .env if not versioning it)
/.env.local
.env.development.local
.env.test.local
.env.production.local
.env

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# system files
.DS_Store

# IDE / Editor directories
.vscode/
.idea/





// File: ./.prettierrc
{
    "semi": true,
    "singleQuote": true,
    "trailingComma": "es5",
    "printWidth": 80,
    "tabWidth": 2,
    "useTabs": false,
    "bracketSpacing": true,
    "jsxBracketSameLine": false,
    "arrowParens": "always",
    "endOfLine": "lf"
  }
  


// File: ./Dockerfile
# Stage 1: build React
FROM node:20-alpine AS builder
WORKDIR /app

COPY package*.json ./
RUN npm ci

COPY . .
RUN npm run build

# Stage 2: serve via Nginx
FROM nginx:alpine
# salin hasil build
COPY --from=builder /app/build /usr/share/nginx/html
# salin config Nginx
COPY nginx/default.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx","-g","daemon off;"]



// File: ./Jenkinsfile
pipeline {
  agent any
  environment {
    NODE_VERSION = '18'
    DEPLOY_DIR = '/var/www/his-fe'
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('Setup Node') {
      steps {
        sh 'node -v'
      }
    }
    stage('Install Dependencies') {
      steps {
        sh 'npm install'
      }
    }
    stage('Lint') {
      steps {
        sh 'npm run lint'
      }
    }
    stage('Test') {
      steps {
        sh 'npm run test -- --watchAll=false'
      }
    }
    stage('Build') {
      steps {
        sh 'npm run build'
      }
    }
    stage('Deploy') {
      steps {
        sh '''
          rm -rf ${DEPLOY_DIR}/*
          cp -R build/* ${DEPLOY_DIR}/
        '''
      }
    }
  }
  post {
    always {
      cleanWs()
    }
    success {
      echo 'CI/CD pipeline completed successfully!'
    }
    failure {
      echo 'CI/CD pipeline failed.'
    }
  }
}



//update


// File: ./package.json
{
  "name": "his-fe",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@fontsource/roboto": "^5.1.1",
    "@mui/icons-material": "^6.4.1",
    "@mui/material": "^6.4.1",
    "axios": "^1.7.9",
    "bootstrap": "^5.3.3",
    "chart.js": "^4.4.8",
    "cra-template": "1.2.0",
    "dotenv": "^16.4.7",
    "html2pdf.js": "^0.10.2",
    "jwt-decode": "^3.1.2",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.4.0",
    "react-paginate": "^8.3.0",
    "react-router-dom": "^7.1.3",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "lint": "eslint . --ext .js,.jsx",
    "lint:fix": "eslint . --ext .js,.jsx --fix",
    "format": "prettier --write \"src/**/*.{js,jsx,css}\""
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-prettier": "^5.2.3",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.1.0",
    "prettier": "^3.4.2"
  }
}



// File: ./src/App.jsx
import React from 'react';

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

import ProtectedRoute from './components/Routes/ProtectedRoute';
import DefaultLayout from './layouts/AppLayout';
import Archives from './pages/Archives/Archives';
import CreateReport from './pages/CreateReport/CreateReport';
import Dashboard from './pages/Dashboard/Dashboard';
import EditReport from './pages/EditReport/EditReport';
import LandingPage from './pages/LandingPage/LandingPage';
import Login from './pages/Login/Login';
import NotFound from './pages/NotFound/NotFound';
import ProfileEdit from './pages/Profile/ProfileEdit';
import ProfileView from './pages/Profile/ProfileView';
import Register from './pages/Register/Register';
import ReportDetail from './pages/ReportDetail/ReportDetail';
import Reports from './pages/Reports/Reports';
import Unauthorized from './pages/Unauthorized/Unauthorized';
import UserManagement from './pages/UserManagement/UserManagement';

function App() {
  return (
    <Router>
      <Routes>
        <Route element={<DefaultLayout />}>
          <Route path="/" element={<LandingPage />} />
          <Route path="/login" element={<Login />} />
          <Route path="/unauthorized" element={<Unauthorized />} />

          <Route
            path="/dashboard"
            element={
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            }
          />
          <Route
            path="/reports"
            element={
              <ProtectedRoute>
                <Reports />
              </ProtectedRoute>
            }
          />
          <Route
            path="/reports/:reportId"
            element={
              <ProtectedRoute>
                <ReportDetail />
              </ProtectedRoute>
            }
          />
          <Route
            path="/reports/edit/:reportId"
            element={
              <ProtectedRoute>
                <EditReport />
              </ProtectedRoute>
            }
          />
          <Route
            path="/create-report"
            element={
              <ProtectedRoute>
                <CreateReport />
              </ProtectedRoute>
            }
          />
          <Route
            path="/archives"
            element={
              <ProtectedRoute>
                <Archives />
              </ProtectedRoute>
            }
          />
          <Route
            path="/profile"
            element={
              <ProtectedRoute>
                <ProfileView />
              </ProtectedRoute>
            }
          />
          <Route
            path="/profile/edit"
            element={
              <ProtectedRoute>
                <ProfileEdit />
              </ProtectedRoute>
            }
          />
          <Route
            path="/user-management"
            element={
              <ProtectedRoute roles={['owner', 'admin']}>
                <UserManagement />
              </ProtectedRoute>
            }
          />
          <Route
            path="/register"
            element={
              <ProtectedRoute roles={['owner', 'admin']}>
                <Register />
              </ProtectedRoute>
            }
          />
          <Route path="*" element={<NotFound />} />
        </Route>
      </Routes>
    </Router>
  );
}

export default App;



// File: ./src/AppWithTheme.jsx
import React, { useContext } from 'react';

import CssBaseline from '@mui/material/CssBaseline';
import { ThemeProvider, createTheme } from '@mui/material/styles';

import App from './App';
import { ThemeContext } from './context/ThemeContext';

const AppWithTheme = () => {
  const { mode } = useContext(ThemeContext);
  const theme = createTheme({
    palette: {
      mode,
      primary: {
        main: '#88c273',
      },
    },
  });

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <App />
    </ThemeProvider>
  );
};

export default AppWithTheme;



// File: ./src/components/FormDialog/UserFormDialog.jsx
import React, { useState, useContext } from 'react';

import CloseIcon from '@mui/icons-material/Close';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  MenuItem,
  IconButton,
} from '@mui/material';

import styles from './UserFormDialog.module.css';
import { AuthContext } from '../../context/AuthContext';
import api from '../../services/api';

const UserFormDialog = ({ open, onClose, onUserCreated }) => {
  const { auth } = useContext(AuthContext);
  const [form, setForm] = useState({
    username: '',
    email: '',
    password: '',
    role: 'user',
    fullName: '',
  });
  const [error, setError] = useState('');
  const [submitting, setSubmitting] = useState(false);

  // Tentukan role yang diizinkan berdasarkan peran user yang sedang login
  const allowedRoles =
    auth.user.role === 'owner' ? ['user', 'admin'] : ['user'];

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSubmitting(true);
    try {
      // Panggil endpoint register
      await api.post('/auth/register', form);
      onUserCreated();
      onClose();
    } catch (err) {
      setError(err.response?.data?.message || 'Gagal membuat user baru');
    } finally {
      setSubmitting(false);
    }
  };

  const handleDialogClose = () => {
    onClose();
    setError('');
    setForm({
      username: '',
      email: '',
      password: '',
      role: 'user',
      fullName: '',
    });
  };

  return (
    <Dialog open={open} onClose={handleDialogClose} maxWidth="sm" fullWidth>
      <DialogTitle className={styles.dialogTitle}>
        Tambah User Baru
        <IconButton className={styles.closeButton} onClick={handleDialogClose}>
          <CloseIcon />
        </IconButton>
      </DialogTitle>
      <DialogContent>
        {error && <p className={styles.errorText}>{error}</p>}
        <form onSubmit={handleSubmit} id="userForm" className={styles.form}>
          <TextField
            label="Username"
            name="username"
            value={form.username}
            onChange={handleChange}
            fullWidth
            required
            margin="normal"
          />
          <TextField
            label="Full Name"
            name="fullName"
            value={form.fullName}
            onChange={handleChange}
            fullWidth
            margin="normal"
          />
          <TextField
            label="Email"
            name="email"
            type="email"
            value={form.email}
            onChange={handleChange}
            fullWidth
            required
            margin="normal"
          />
          <TextField
            label="Password"
            name="password"
            type="password"
            value={form.password}
            onChange={handleChange}
            fullWidth
            required
            margin="normal"
          />
          <TextField
            select
            label="Role"
            name="role"
            value={form.role}
            onChange={handleChange}
            fullWidth
            required
            margin="normal"
          >
            {allowedRoles.map((option) => (
              <MenuItem key={option} value={option}>
                {option.toUpperCase()}
              </MenuItem>
            ))}
          </TextField>
        </form>
      </DialogContent>
      <DialogActions>
        <Button onClick={handleDialogClose} color="secondary">
          Batal
        </Button>
        <Button
          form="userForm"
          type="submit"
          variant="contained"
          color="primary"
          disabled={submitting}
        >
          {submitting ? 'Memproses...' : 'Simpan'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default UserFormDialog;



// File: ./src/components/FormDialog/UserFormDialog.module.css
.dialogTitle {
  font-weight: bold;
  font-size: 1.5rem;
  position: relative;
}

.closeButton {
  position: absolute;
  right: 8px;
  top: 8px;
}

.errorText {
  color: #d32f2f;
  margin-bottom: 1rem;
  font-size: 0.9rem;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}



// File: ./src/components/LogoutDialog/LogoutDialog.jsx
import React, { useState } from 'react';

import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
} from '@mui/material';

import styles from './LogoutDialog.module.css';
import logoutImg from '../../assets/images/logout-illustration.png';

export default function LogoutDialog({ open, onClose, onLogout, onRedirect }) {
  // stage: 'confirm' atau 'success'
  const [stage, setStage] = useState('confirm');

  const handleConfirm = () => {
    onLogout(); // Panggil fungsi logout dari AuthContext
    setStage('success');
  };

  const handleClose = () => {
    setStage('confirm'); // Reset stage ke "confirm"
    onClose();
    // Jika sudah sukses, panggil onRedirect untuk mengarahkan ke landing page
    if (stage === 'success') {
      onRedirect();
    }
  };

  return (
    <Dialog
      open={open}
      onClose={handleClose}
      className={styles.dialogContainer}
      maxWidth="xs"
      fullWidth
    >
      {stage === 'confirm' ? (
        <>
          <DialogTitle className={styles.dialogTitle}>
            Konfirmasi Keluar
          </DialogTitle>
          <DialogContent className={styles.dialogContent}>
            <Box className={styles.illustrationBox}>
              <img
                src={logoutImg}
                alt="Logout"
                className={styles.illustration}
              />
            </Box>
            <Typography className={styles.dialogText}>
              Apakah Anda yakin ingin keluar?
            </Typography>
          </DialogContent>
          <DialogActions className={styles.dialogActions}>
            <Button onClick={handleClose} className={styles.cancelButton}>
              Batal
            </Button>
            <Button
              variant="contained"
              color="error"
              onClick={handleConfirm}
              className={styles.logoutButton}
            >
              Keluar
            </Button>
          </DialogActions>
        </>
      ) : (
        <>
          <DialogTitle className={styles.dialogTitle}>
            Anda telah berhasil keluar
          </DialogTitle>
          <DialogContent className={styles.dialogContent}>
            <Box className={styles.illustrationBox}>
              <img
                src={logoutImg}
                alt="Logged Out"
                className={styles.illustration}
              />
            </Box>
            <Typography className={styles.dialogText}>
              Anda dapat masuk kembali kapan saja.
            </Typography>
          </DialogContent>
          <DialogActions className={styles.dialogActions}>
            <Button onClick={handleClose} className={styles.homeButton}>
              OK
            </Button>
          </DialogActions>
        </>
      )}
    </Dialog>
  );
}



// File: ./src/components/LogoutDialog/LogoutDialog.module.css
.dialogContainer .MuiPaper-root {
    border-radius: 16px;
    padding: 8px;
  }
  
  .dialogTitle {
    font-weight: bold;
    text-align: center;
    font-size: 1.2rem;
    margin-bottom: 8px;
  }
  
  .dialogContent {
    text-align: center;
  }
  
  .illustrationBox {
    display: flex;
    justify-content: center;
    margin-bottom: 8px;
  }
  
  .illustration {
    max-width: 120px;
    height: auto;
    object-fit: contain;
  }
  
  .dialogText {
    margin-top: 8px;
    margin-bottom: 16px;
    line-height: 1.4;
    color: #555;
  }
  
  .dialogActions {
    display: flex;
    justify-content: center;
    gap: 8px;
  }
  
  .cancelButton {
    color: #555;
    text-transform: none;
    border: 1px solid #ccc;
  }
  
  .logoutButton {
    background-color: #d32f2f;
    color: #fff;
    text-transform: none;
  }
  
  .homeButton {
    color: #333;
    border: 1px solid #999;
    text-transform: none;
  }
  


// File: ./src/components/LogoutDialog/NotificationDialog.jsx
import React, { useEffect } from 'react';

import CloseIcon from '@mui/icons-material/Close';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  IconButton,
  Typography,
} from '@mui/material';

const NotificationDialog = ({ open, message, onClose, severity }) => {
  // Timer untuk otomatis menutup notifikasi setelah 4 detik
  useEffect(() => {
    if (open) {
      const timer = setTimeout(() => {
        onClose();
      }, 4000);
      return () => clearTimeout(timer);
    }
  }, [open, onClose]);

  // Fungsi untuk mengembalikan background color berdasarkan severity
  const getBackgroundColor = () => {
    if (severity === 'success') return '#C8E6C9'; // hijau muda
    if (severity === 'error') return '#FFCDD2'; // merah muda
    return '#e0e0e0'; // default / netral
  };

  // Fungsi untuk mengembalikan border color berdasarkan severity
  const getBorderColor = () => {
    if (severity === 'success') return '#388E3C'; // hijau tua
    if (severity === 'error') return '#D32F2F'; // merah tua
    return '#757575'; // default / netral
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      PaperProps={{
        style: {
          position: 'fixed',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          margin: 0,
          padding: '16px 24px',
          minWidth: 300,
          backgroundColor: getBackgroundColor(),
          border: `2px solid ${getBorderColor()}`,
          borderRadius: '8px',
          boxShadow: '0 4px 16px rgba(0, 0, 0, 0.2)',
        },
      }}
    >
      <DialogTitle sx={{ m: 0, p: 1 }}>
        Notifikasi
        <IconButton
          aria-label="close"
          onClick={onClose}
          sx={{
            position: 'absolute',
            right: 8,
            top: 8,
            color: getBorderColor(),
          }}
        >
          <CloseIcon />
        </IconButton>
      </DialogTitle>
      <DialogContent dividers>
        <Typography variant="body1">{message}</Typography>
      </DialogContent>
    </Dialog>
  );
};

export default NotificationDialog;



// File: ./src/components/Navbar/Navbar.jsx
import React, { useContext } from 'react';

import SidebarNavbar from './SidebarNavbar';
import TopNavbar from './TopBar';
import { AuthContext } from '../../context/AuthContext';
import { ThemeContext } from '../../context/ThemeContext';

const Navbar = () => {
  const { auth } = useContext(AuthContext);
  const { toggleTheme, mode } = useContext(ThemeContext);

  return auth.isAuthenticated ? (
    <SidebarNavbar toggleTheme={toggleTheme} mode={mode} />
  ) : (
    <TopNavbar toggleTheme={toggleTheme} mode={mode} />
  );
};

export default Navbar;



// File: ./src/components/Navbar/Navbar.module.css
.navbar {
  background-color: #88c273;
}



// File: ./src/components/Navbar/SidebarNavbar.jsx
import React, { useState, useContext } from 'react';

import ArchiveIcon from '@mui/icons-material/Archive';
import ArticleIcon from '@mui/icons-material/Article';
import DashboardIcon from '@mui/icons-material/Dashboard';
import GroupIcon from '@mui/icons-material/Group';
import LogoutIcon from '@mui/icons-material/Logout';
import MenuIcon from '@mui/icons-material/Menu';
import PersonIcon from '@mui/icons-material/Person';
import {
  Box,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  IconButton,
  Tooltip,
  Divider,
  Button,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import styles from './SidebarNavbar.module.css';
import logoNavbar from '../../assets/images/logo-navbar.png';
import { AuthContext } from '../../context/AuthContext';
import LogoutDialog from '../LogoutDialog/LogoutDialog';

export default function SidebarNavbar({ collapsed, setCollapsed }) {
  const [logoutOpen, setLogoutOpen] = useState(false);
  const { auth, logout } = useContext(AuthContext);
  const navigate = useNavigate();
  const userRole = auth?.user?.role || 'User';

  let menuItems = [];
  if (userRole.toLowerCase() === 'user') {
    menuItems = [
      { text: 'Dashboard', icon: <DashboardIcon />, path: '/dashboard' },
      {
        text: 'Reports',
        icon: <ArticleIcon />,
        children: [
          { text: 'Create Report', path: '/create-report' },
          { text: 'Report Data', path: '/reports' },
        ],
      },
      { text: 'Profile', icon: <PersonIcon />, path: '/profile' },
    ];
  } else {
    menuItems = [
      { text: 'Dashboard', icon: <DashboardIcon />, path: '/dashboard' },
      {
        text: 'Reports',
        icon: <ArticleIcon />,
        children: [
          { text: 'Create Report', path: '/create-report' },
          { text: 'Report Data', path: '/reports' },
        ],
      },
      { text: 'Archives', icon: <ArchiveIcon />, path: '/archives' },
      { text: 'Profile', icon: <PersonIcon />, path: '/profile' },
      {
        text: 'User Management',
        icon: <GroupIcon />,
        path: '/user-management',
      },
    ];
  }

  const handleToggleCollapse = () => {
    setCollapsed(!collapsed);
  };

  const handleLogoutClick = () => {
    setLogoutOpen(true);
  };

  const handleLogoutClose = () => {
    setLogoutOpen(false);
  };

  const handleLogoutConfirm = () => {
    logout();
  };

  const handleNav = (path) => {
    navigate(path);
  };

  return (
    <Box className={`${styles.sidebar} ${collapsed ? styles.collapsed : ''}`}>
      {/* Brand Section */}
      <Box className={styles.brandSection}>
        {!collapsed && (
          <Box className={styles.logoContainer}>
            <img src={logoNavbar} alt="Logo" className={styles.logoImage} />
            <Button variant="outlined" className={styles.roleButton}>
              Role: {userRole}
            </Button>
          </Box>
        )}
        <IconButton
          onClick={handleToggleCollapse}
          className={styles.toggleButton}
        >
          <MenuIcon />
        </IconButton>
      </Box>

      <Divider className={styles.divider} />

      {/* Menu */}
      <List className={styles.menuList}>
        {menuItems.map((item, idx) => {
          if (item.children) {
            return (
              <Box key={idx}>
                <Tooltip title={collapsed ? item.text : ''} placement="right">
                  <ListItem
                    button
                    onClick={() => handleNav(item.children[0].path)}
                    className={styles.listItem}
                  >
                    <ListItemIcon className={styles.icon}>
                      {item.icon}
                    </ListItemIcon>
                    {!collapsed && (
                      <ListItemText
                        primary={item.text}
                        className={styles.text}
                      />
                    )}
                  </ListItem>
                </Tooltip>
                {!collapsed && (
                  <Box className={styles.subMenu}>
                    {item.children.map((subItem, subIdx) => (
                      <ListItem
                        button
                        key={subIdx}
                        onClick={() => handleNav(subItem.path)}
                        className={styles.subMenuItem}
                      >
                        <ListItemText
                          primary={subItem.text}
                          className={styles.subMenuText}
                        />
                      </ListItem>
                    ))}
                  </Box>
                )}
              </Box>
            );
          }
          return (
            <Tooltip
              title={collapsed ? item.text : ''}
              placement="right"
              key={idx}
            >
              <ListItem
                button
                onClick={() => handleNav(item.path)}
                className={styles.listItem}
              >
                <ListItemIcon className={styles.icon}>{item.icon}</ListItemIcon>
                {!collapsed && (
                  <ListItemText primary={item.text} className={styles.text} />
                )}
              </ListItem>
            </Tooltip>
          );
        })}
      </List>

      {/* Footer: Logout */}
      <Box className={styles.footer}>
        <Tooltip title={collapsed ? 'Logout' : ''} placement="right">
          <ListItem
            button
            onClick={handleLogoutClick}
            className={styles.listItem}
          >
            <ListItemIcon className={styles.icon}>
              <LogoutIcon />
            </ListItemIcon>
            {!collapsed && (
              <ListItemText primary="Logout" className={styles.text} />
            )}
          </ListItem>
        </Tooltip>
      </Box>

      <LogoutDialog
        open={logoutOpen}
        onClose={handleLogoutClose}
        onLogout={handleLogoutConfirm}
        onRedirect={() => navigate('/')}
      />
    </Box>
  );
}



// File: ./src/components/Navbar/SidebarNavbar.module.css
.sidebar {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  background-color: #ffffff;
  border-right: 1px solid #e0e0e0;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
  transition: width 0.2s ease;
  scrollbar-width: none;
}
.sidebar::-webkit-scrollbar {
  display: none;
}
.sidebar:not(.collapsed) {
  width: 240px;
}
.collapsed {
  width: 80px;
}
.brandSection {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 16px;
}
.logoContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
}
.logoImage {
  max-width: 120px;
  height: auto;
  object-fit: contain;
  margin-bottom: 8px;
}
.roleButton {
  font-size: 0.95rem;
  font-weight: 600;
  color: #388e3c;
  border: 1px solid #388e3c;
  padding: 4px 12px;
  text-transform: none;
  border-radius: 4px;
  transition: background-color 0.2s ease, color 0.2s ease;
  margin-top: 4px;
}
.roleButton:hover {
  background-color: #388e3c;
  color: #fff;
}
.toggleButton {
  color: #666;
  transition: transform 0.2s ease;
}
.toggleButton:hover {
  transform: scale(1.1);
}
.divider {
  margin: 0 16px;
}
.menuList {
  flex-grow: 1;
  padding: 0;
  margin: 0;
}
.listItem {
  display: flex;
  align-items: center;
  cursor: pointer;
  padding: 8px 16px;
  margin: 4px 8px;
  border-radius: 4px;
  transition: background-color 0.15s ease;
}
.listItem:hover {
  background-color: #f5f5f5;
}
.icon {
  color: #666;
  margin-right: 12px;
}
.text {
  color: #333;
  font-size: 0.95rem;
}
.subMenu {
  margin-left: 48px;
  display: flex;
  flex-direction: column;
  margin-top: 4px;
  margin-bottom: 8px;
}
.subMenuItem {
  padding: 6px 16px;
  margin: 2px 0;
  border-radius: 4px;
  transition: background-color 0.15s ease;
  cursor: pointer;
}
.subMenuItem:hover {
  background-color: #eaeaea;
}
.subMenuText {
  color: #555;
  font-size: 0.9rem;
}
.footer {
  margin-top: auto;
  border-top: 1px solid #e0e0e0;
  padding: 16px;
}



// File: ./src/components/Navbar/TopBar.jsx
import React, { useEffect, useState, useContext } from 'react';

import LoginIcon from '@mui/icons-material/Login';
import PersonOutlineIcon from '@mui/icons-material/PersonOutline';
import { AppBar, Toolbar, Typography, Box, Tooltip } from '@mui/material';
import { useLocation, useNavigate } from 'react-router-dom';

import styles from './TopBar.module.css';
import { AuthContext } from '../../context/AuthContext';

// Mapping path ke judul halaman
const pageTitleMap = {
  '/dashboard': 'Dashboard',
  '/reports': 'Reports',
  '/create-report': 'Create Report',
  '/archives': 'Archives',
  '/profile': 'Profile',
  '/user-management': 'User Management',
  '/login': 'HIS',
};

export default function TopBar({ topBarHeight, leftOffset }) {
  const location = useLocation();
  const navigate = useNavigate();
  const { auth } = useContext(AuthContext);

  const [pageTitle, setPageTitle] = useState('HIS');

  useEffect(() => {
    const pathname = location.pathname;
    setPageTitle(pageTitleMap[pathname] || 'HIS');
  }, [location]);

  // Klik judul di kiri => ke dashboard atau landing page
  const handleLeftClick = () => {
    if (auth.user) {
      navigate('/dashboard');
    } else {
      navigate('/'); // landing page
    }
  };

  // Klik di kanan => ke profile atau login
  const handleRightClick = () => {
    if (auth.user) {
      navigate('/profile');
    } else if (location.pathname !== '/login') {
      navigate('/login');
    }
  };

  // Pastikan selalu menampilkan fullName jika ada, kalau tidak ada gunakan username
  const displayName = auth.user?.fullName || auth.user?.username;

  return (
    <AppBar
      position="absolute"
      sx={{
        top: 0,
        left: leftOffset,
        width: `calc(100% - ${leftOffset}px)`,
        height: topBarHeight,
        zIndex: 1200,
      }}
      className={styles.topBar}
      elevation={2}
    >
      <Toolbar sx={{ minHeight: topBarHeight, px: 2 }}>
        {/* Bagian Kiri (Judul Halaman) */}
        <Box
          sx={{
            flexGrow: 1,
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
          }}
          onClick={handleLeftClick}
        >
          <Typography variant="h6" className={styles.title}>
            {pageTitle}
          </Typography>
        </Box>

        {/* Bagian Kanan (User Info atau Login) */}
        <Box
          sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}
          onClick={handleRightClick}
        >
          {auth.user ? (
            <Tooltip title="Go to Profile">
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <PersonOutlineIcon className={styles.userIcon} />
                <Typography variant="body1" className={styles.username}>
                  {displayName}
                </Typography>
              </Box>
            </Tooltip>
          ) : (
            location.pathname !== '/login' && (
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <LoginIcon className={styles.loginIcon} />
                <Typography variant="body1" className={styles.loginText}>
                  Login
                </Typography>
              </Box>
            )
          )}
        </Box>
      </Toolbar>
    </AppBar>
  );
}



// File: ./src/components/Navbar/TopBar.module.css
.topBar {
  background-color: #2e7d32; /* Hijau lebih gelap */
  color: #fff;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}

.title {
  font-weight: 700;
  color: #fff;
  transition: opacity 0.2s ease;
}

.userIcon {
  color: #fff;
  font-size: 1.2rem;
}

.username {
  font-weight: 600;
  color: #fff;
  white-space: nowrap; /* mencegah teks terpotong ke baris baru */
}

.loginIcon {
  color: #fff;
  font-size: 1.2rem;
}

.loginText {
  font-weight: 600;
  color: #fff;
  margin-left: 4px;
}













// File: ./src/components/Routes/PrivateRoute.jsx
import React, { useContext } from 'react';

import { Navigate } from 'react-router-dom';

import { AuthContext } from '../../context/AuthContext';

const PrivateRoute = ({ children }) => {
  const { auth } = useContext(AuthContext);

  return auth.isAuthenticated ? children : <Navigate to="/login" />;
};

export default PrivateRoute;



// File: ./src/components/Routes/ProtectedRoute.jsx
import React, { useContext } from 'react';

import PropTypes from 'prop-types';
import { Navigate } from 'react-router-dom';

import { AuthContext } from '../../context/AuthContext';

const ProtectedRoute = ({ children, roles }) => {
  const { auth } = useContext(AuthContext);

  if (!auth.isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  if (roles && !roles.includes(auth.user.role)) {
    return <Navigate to="/unauthorized" replace />;
  }

  return children;
};

ProtectedRoute.propTypes = {
  children: PropTypes.node.isRequired,
  roles: PropTypes.arrayOf(PropTypes.string),
};

ProtectedRoute.defaultProps = {
  roles: null,
};

export default ProtectedRoute;



// File: ./src/context/AuthContext.jsx
import React, {
  createContext,
  useState,
  useEffect,
  useCallback,
  useMemo,
} from 'react';

import api from '../services/api';
import {
  login as loginService,
  logout as logoutService,
} from '../services/authService';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [auth, setAuth] = useState(() => {
    const storedUser = localStorage.getItem('user');
    return storedUser
      ? { isAuthenticated: true, user: JSON.parse(storedUser) }
      : { isAuthenticated: false, user: null };
  });

  // Pastikan logout menghapus localStorage, state, dan memanggil API logout
  const logout = useCallback(async () => {
    try {
      await logoutService(); // memanggil endpoint /api/auth/logout di backend
    } catch (err) {
      console.error('Logout API error:', err);
      // walaupun error, tetap lanjut hapus local storage agar user dianggap logout
    }
    localStorage.removeItem('user');
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    setAuth({ isAuthenticated: false, user: null });
  }, []);

  useEffect(() => {
    const initializeAuth = async () => {
      const accessToken = localStorage.getItem('accessToken');
      if (accessToken) {
        try {
          const response = await api.get('/users/me');
          setAuth({ isAuthenticated: true, user: response.data });
          localStorage.setItem('user', JSON.stringify(response.data));
        } catch (error) {
          console.error('Invalid token or failed to fetch user data:', error);
          logout();
        }
      }
    };
    initializeAuth();
  }, [logout]);

  const login = useCallback(async (credentials) => {
    try {
      const user = await loginService(credentials);
      setAuth({ isAuthenticated: true, user });
      localStorage.setItem('user', JSON.stringify(user));
    } catch (error) {
      console.error('Login failed:', error);
      throw error;
    }
  }, []);

  const value = useMemo(
    () => ({ auth, login, logout, setAuth }),
    [auth, login, logout]
  );

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};



// File: ./src/context/ThemeContext.jsx
import React, { createContext, useState, useMemo } from 'react';

import { CssBaseline } from '@mui/material';
import {
  createTheme,
  ThemeProvider as MuiThemeProvider,
} from '@mui/material/styles';

export const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [mode, setMode] = useState(
    () => localStorage.getItem('themeMode') || 'light'
  );

  const toggleTheme = () => {
    const newMode = mode === 'light' ? 'dark' : 'light';
    setMode(newMode);
    localStorage.setItem('themeMode', newMode);
  };

  const theme = useMemo(
    () =>
      createTheme({
        palette: {
          mode,
          primary: { main: '#88c273' },
          background: {
            default: mode === 'light' ? '#ffffff' : '#121212',
            paper: mode === 'light' ? '#f7f7f7' : '#333333',
          },
        },
      }),
    [mode]
  );

  return (
    <ThemeContext.Provider value={{ mode, toggleTheme }}>
      <MuiThemeProvider theme={theme}>
        <CssBaseline />
        {children}
      </MuiThemeProvider>
    </ThemeContext.Provider>
  );
};



// File: ./src/index.css
html,
body,
#root {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  overflow-x: hidden; /* Hilangkan scroll horizontal secara global */
  box-sizing: border-box;
}


code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}




// File: ./src/index.js
import React from 'react';

import ReactDOM from 'react-dom/client';

import AppWithTheme from './AppWithTheme';
import { AuthProvider } from './context/AuthContext';
import { ThemeProvider as CustomThemeProvider } from './context/ThemeContext';
import './index.css';
import '@fontsource/roboto';
import 'bootstrap/dist/css/bootstrap.min.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <CustomThemeProvider>
      <AuthProvider>
        <AppWithTheme />
      </AuthProvider>
    </CustomThemeProvider>
  </React.StrictMode>
);



// File: ./src/layouts/AppLayout.jsx
import React, { useState, useContext } from 'react';

import { Box } from '@mui/material';
import { Outlet } from 'react-router-dom';

import SidebarNavbar from '../components/Navbar/SidebarNavbar';
import TopBar from '../components/Navbar/TopBar';
import { AuthContext } from '../context/AuthContext';

export default function AppLayout() {
  const { auth } = useContext(AuthContext);

  // State collapse/expand sidebar
  const [collapsed, setCollapsed] = useState(false);

  // Ukuran layout
  const SIDEBAR_WIDTH = 240;
  const SIDEBAR_COLLAPSED_WIDTH = 80;
  const TOPBAR_HEIGHT = 64;

  // Lebar sidebar aktif
  const currentSidebarWidth = collapsed
    ? SIDEBAR_COLLAPSED_WIDTH
    : SIDEBAR_WIDTH;

  return (
    <>
      {/* Sidebar (hanya muncul jika user sudah login) */}
      {auth.user && (
        <SidebarNavbar
          collapsed={collapsed}
          setCollapsed={setCollapsed}
          sidebarWidth={currentSidebarWidth}
        />
      )}

      {/* Topbar di sisi kanan (mulai dari sisi kanan sidebar jika login) */}
      <TopBar
        topBarHeight={TOPBAR_HEIGHT}
        leftOffset={auth.user ? currentSidebarWidth : 0}
      />

      {/* Konten utama: scroll vertical, tidak ada scroll horizontal */}
      <Box
        sx={{
          position: 'absolute',
          top: TOPBAR_HEIGHT,
          left: auth.user ? currentSidebarWidth : 0,
          right: 0,
          bottom: 0,
          overflowY: 'auto',
          overflowX: 'hidden',
          backgroundColor: '#f9f9f9',
        }}
      >
        <Outlet />
      </Box>
    </>
  );
}



// File: ./src/pages/Archives/ArchiveDetailModal.jsx
import React, { useRef, useState } from 'react';

import AccessTimeIcon from '@mui/icons-material/AccessTime';
import CancelIcon from '@mui/icons-material/Cancel';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import InfoIcon from '@mui/icons-material/Info';
import PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';
import UpdateIcon from '@mui/icons-material/Update';
import VerifiedUserIcon from '@mui/icons-material/VerifiedUser';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Snackbar,
  Alert,
} from '@mui/material';
import Paper from '@mui/material/Paper';
import html2pdf from 'html2pdf.js';

import styles from './Archives.module.css';

const ArchiveDetailModal = ({ open, onClose, archive }) => {
  const contentRef = useRef(null);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'info',
  });

  if (!archive) return null;

  const isEdited = archive.updatedAt && archive.updatedAt !== archive.createdAt;

  const formatDateWIB = (dateStr) => {
    const options = {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    };
    return new Date(dateStr).toLocaleString('id-ID', options) + ' WIB';
  };

  let fullValidationText = '';
  try {
    if (archive.validationDetails) {
      const parsed = JSON.parse(archive.validationDetails);
      fullValidationText = parsed.gemini?.output || '';
    }
  } catch (err) {
    fullValidationText = '';
  }
  const validationText =
    fullValidationText.trim().split(/\s+/).length > 1
      ? fullValidationText.trim().split(/\s+/).slice(1).join(' ')
      : fullValidationText || 'N/A';

  const handleDownloadPDF = () => {
    if (contentRef.current) {
      setSnackbar({
        open: true,
        message: 'Downloading PDF...',
        severity: 'info',
      });
      const opt = {
        margin: 0.5,
        filename: `${archive.title}.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' },
      };
      html2pdf()
        .set(opt)
        .from(contentRef.current)
        .save()
        .then(() => {
          setSnackbar({
            open: true,
            message: 'Download successful!',
            severity: 'success',
          });
        })
        .catch((err) => {
          console.error(err);
          setSnackbar({
            open: true,
            message: 'Download failed!',
            severity: 'error',
          });
        });
    }
  };

  const handleCloseSnackbar = (event, reason) => {
    if (reason === 'clickaway') return;
    setSnackbar({ ...snackbar, open: false });
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle className={styles.detailTitle}>{archive.title}</DialogTitle>
      <DialogContent dividers className={styles.detailContent} ref={contentRef}>
        <Box className={styles.downloadContainer}>
          <Button
            variant="outlined"
            onClick={handleDownloadPDF}
            className={styles.downloadButton}
          >
            <PictureAsPdfIcon className={styles.pdfIcon} fontSize="small" />
            Download PDF
          </Button>
        </Box>

        {archive.validationStatus === 'hoax' ? (
          <Box className={`${styles.statusBadge} ${styles.hoax}`}>
            <CancelIcon className={styles.iconStatus} fontSize="large" />
            Hoax
          </Box>
        ) : archive.validationStatus === 'valid' ? (
          <Box className={`${styles.statusBadge} ${styles.valid}`}>
            <VerifiedUserIcon className={styles.iconStatus} fontSize="large" />
            Valid
          </Box>
        ) : (
          <Box className={`${styles.statusBadge} ${styles.doubtful}`}>
            <HelpOutlineIcon className={styles.iconStatus} fontSize="large" />
            Diragukan
          </Box>
        )}

        <Box className={styles.timestampBox}>
          <AccessTimeIcon className={styles.icon} fontSize="small" />
          <Typography variant="body2" className={styles.timestamp}>
            Dibuat pada: {formatDateWIB(archive.createdAt)}
          </Typography>
          {isEdited && (
            <Box className={styles.updatedBox}>
              <UpdateIcon className={styles.icon} fontSize="small" />
              <Typography variant="body2" className={styles.timestamp}>
                Diubah pada: {formatDateWIB(archive.updatedAt)}
              </Typography>
              {archive.editedBy && (
                <Typography variant="body2" className={styles.editedBy}>
                  Archive ini diedit oleh {archive.editedBy}
                </Typography>
              )}
            </Box>
          )}
        </Box>

        <Typography variant="h3" className={styles.title} mt={2}>
          {archive.title}
        </Typography>

        <Box mt={3}>
          <Typography variant="h6" className={styles.sectionHeader}>
            Isi Archive:
          </Typography>
          <Paper className={styles.paperContent}>
            <Typography variant="body1" className={styles.contentText}>
              {archive.content}
            </Typography>
            {archive.document && (
              <Box mt={2}>
                <Typography variant="subtitle2">Dokumen/Lampiran:</Typography>
                <a
                  href={archive.document}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {archive.document}
                </a>
              </Box>
            )}
          </Paper>
        </Box>

        <Box mt={3}>
          <Typography variant="h6" className={styles.sectionHeader}>
            Detail Archive:
          </Typography>
          <Paper className={styles.paperContent}>
            <Box display="flex" alignItems="center">
              <InfoIcon className={styles.iconInfo} fontSize="small" />
              <Typography variant="body1" className={styles.contentText}>
                {validationText}
              </Typography>
            </Box>
          </Paper>
        </Box>

        <Box mt={3}>
          <Typography variant="body2" className={styles.userInfo}>
            Archive ini dibuat oleh {archive.user.username}.
          </Typography>
        </Box>

        {archive.relatedNews && archive.relatedNews.length > 0 && (
          <Box mt={3}>
            <Typography variant="h6" className={styles.sectionHeader}>
              Berita Terkait:
            </Typography>
            {archive.relatedNews.map((news, index) => (
              <Box key={index} className={styles.relatedNewsItem}>
                <Typography variant="body2" className={styles.relatedNewsLink}>
                  <a href={news.url} target="_blank" rel="noopener noreferrer">
                    {news.title}
                  </a>
                </Typography>
                <Typography variant="body1" className={styles.contentText}>
                  {news.description}
                </Typography>
                <Typography variant="caption" className={styles.timestamp}>
                  Source: {news.source} - Published: {news.publishedAt}
                </Typography>
              </Box>
            ))}
          </Box>
        )}
      </DialogContent>
      <DialogActions className={styles.detailActions}>
        <Button onClick={onClose} color="primary">
          Tutup
        </Button>
      </DialogActions>
      <Snackbar
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        open={snackbar.open}
        autoHideDuration={5000}
        onClose={handleCloseSnackbar}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Dialog>
  );
};

export default ArchiveDetailModal;



// File: ./src/pages/Archives/Archives.jsx
import React, { useEffect, useState, useContext } from 'react';

import {
  Delete as DeleteIcon,
  Visibility as VisibilityIcon,
  Description as DescriptionIcon,
} from '@mui/icons-material';
import {
  Container,
  Paper,
  Box,
  Typography,
  IconButton,
  CircularProgress,
} from '@mui/material';

import ArchiveDetailModal from './ArchiveDetailModal';
import styles from './Archives.module.css';
import DeleteArchiveDialog from './DeleteArchiveDialog';
import { AuthContext } from '../../context/AuthContext';
import api from '../../services/api';

const Archives = () => {
  const { auth } = useContext(AuthContext);
  const [archives, setArchives] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [selected, setSelected] = useState(null);
  const [toDelete, setToDelete] = useState(null);

  useEffect(() => {
    fetchArchives();
    // eslint-disable-next-line
  }, []);

  const fetchArchives = async () => {
    setLoading(true);
    try {
      const res = await api.get('/archives');
      setArchives(res.data);
    } catch {
      setError('Gagal mengambil data arsip.');
    } finally {
      setLoading(false);
    }
  };

  const ArchivesHeader = () => (
    <Paper
      elevation={0}
      sx={{
        display: 'flex',
        alignItems: 'center',
        gap: 2,
        backgroundColor: '#e8f5e9',
        p: 2,
        borderRadius: 2,
        mb: 4,
      }}
    >
      <DescriptionIcon sx={{ color: '#2e7d32', fontSize: 32 }} />
      <Box>
        <Typography variant="h5" sx={{ fontWeight: 700, color: '#2e7d32' }}>
          Archives
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Telusuri, lihat detail, unduh, atau hapus arsip dengan mudah.
        </Typography>
      </Box>
    </Paper>
  );

  // Hanya Owner/Admin
  if (auth.user && !['owner', 'admin'].includes(auth.user.role)) {
    return (
      <Container maxWidth="lg" className={styles.archivesContainer}>
        <Typography variant="h6" color="error" align="center">
          Akses ditolak: hanya Owner/Admin yang dapat melihat arsip.
        </Typography>
      </Container>
    );
  }

  // Group by "Mon YYYY"
  const grouped = archives.reduce((acc, arc) => {
    const key = new Date(arc.archivedAt).toLocaleString('id-ID', {
      month: 'long',
      year: 'numeric',
    });
    acc[key] = acc[key] || [];
    acc[key].push(arc);
    return acc;
  }, {});
  const months = Object.keys(grouped).sort((a, b) => {
    const da = new Date(a),
      db = new Date(b);
    return db - da;
  });

  return (
    <Container maxWidth="lg" className={styles.archivesContainer}>
      <ArchivesHeader />

      {loading ? (
        <Box className={styles.loader}>
          <CircularProgress />
        </Box>
      ) : error ? (
        <Typography color="error" align="center">
          {error}
        </Typography>
      ) : archives.length === 0 ? (
        <Typography align="center">Belum ada arsip.</Typography>
      ) : (
        months.map((month) => (
          <Box key={month} className={styles.groupContainer}>
            <Typography variant="h6" className={styles.groupHeader}>
              {month}
            </Typography>
            <Box className={styles.cardsGrid}>
              {grouped[month].map((arc) => (
                <Paper
                  key={arc.id}
                  elevation={2}
                  className={styles.archiveCard}
                >
                  <Box className={styles.cardContent}>
                    <DescriptionIcon
                      className={styles.archiveIcon}
                      fontSize="large"
                    />
                    <Typography className={styles.archiveTitle}>
                      {arc.title}
                    </Typography>
                    <Typography className={styles.archiveDate}>
                      {new Date(arc.archivedAt).toLocaleDateString('id-ID')}
                    </Typography>
                  </Box>
                  <Box className={styles.cardActions}>
                    <IconButton
                      onClick={() => setSelected(arc)}
                      className={styles.viewBtn}
                    >
                      <VisibilityIcon />
                    </IconButton>
                    <IconButton
                      onClick={() => setToDelete(arc)}
                      className={styles.deleteBtn}
                    >
                      <DeleteIcon />
                    </IconButton>
                  </Box>
                </Paper>
              ))}
            </Box>
          </Box>
        ))
      )}

      {/* Modals */}
      {selected && (
        <ArchiveDetailModal
          open
          archive={selected}
          onClose={() => setSelected(null)}
        />
      )}
      {toDelete && (
        <DeleteArchiveDialog
          open
          archive={toDelete}
          onClose={() => setToDelete(null)}
          onConfirm={async () => {
            await api.delete(`/archives/${toDelete.id}`);
            setToDelete(null);
            fetchArchives();
          }}
        />
      )}
    </Container>
  );
};

export default Archives;



// File: ./src/pages/Archives/Archives.module.css
.archivesContainer {
  padding: 2rem;
}

/* Header Section (baru) */
.headerPaper {
  background-color: #e8f5e9; /* light HIS green */
  padding: 1.5rem;
  margin-bottom: 2rem;
  border-radius: 8px;
}
.headerTitle {
  color: #2e7d32; /* dark HIS green */
  font-weight: 700;
  margin-bottom: 0.25rem;
}
.headerSubtitle {
  color: #33691e;
}

/* Judul halaman (lama) */
.pageTitle {
  margin-bottom: 1.5rem;
  font-weight: bold;
  color: #333;
  text-align: center;
}

/* Loader (lama) */
.loader {
  display: flex;
  justify-content: center;
  margin-top: 2rem;
}

/* Group (bulan) container (lama) */
.groupContainer {
  margin-bottom: 2rem;
}
/* Group header (bulan) — perbarui border dan warna */
.groupHeader {
  font-weight: bold;
  color: #2e7d32; /* gunakan hijau brand */
  margin-bottom: 1rem;
  border-bottom: 2px solid #a5d6a7; /* hijau muda */
  padding-bottom: 0.5rem;
}

/* Grid responsif untuk kartu (baru) */
.cardsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1.5rem;
}

/* File view cards (lama + ditambahkan border kiri) */
.archiveCard {
  margin-bottom: 1rem;
  display: flex;
  flex-direction: column;
  transition: box-shadow 0.3s ease;
  padding: 8px;
  border-left: 4px solid #81c784; /* aksen hijau */
}
.archiveCard:hover {
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

/* Konten kartu (lama, plus center) */
.archiveCardContent {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

/* Ikon dan teks (lama + warna brand) */
.fileIcon {
  color: #66bb6a;
  margin-bottom: 8px;
}
.archiveTitle {
  font-weight: 600;
  margin-bottom: 4px;
  color: #333;
}
.archiveDate {
  font-size: 0.8rem;
  color: #555;
  margin-bottom: 4px;
}

/* Tombol aksi (lama) */
.cardActions {
  display: flex;
  justify-content: center;
  gap: 8px;
  margin-top: 8px;
}
.actionButton {
  text-transform: none;
  font-weight: 600;
}

/* Tombol lihat/hapus (baru) */
.viewBtn {
  color: #2e7d32;
}
.deleteBtn {
  color: #c62828;
}

/* Detail Modal Styling (lama) */
.detailContainer {
  padding: 2rem;
}
.detailCard {
  padding: 16px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
}
.downloadContainer {
  text-align: right;
  margin-bottom: 8px;
}
.downloadButton {
  text-transform: none;
}
.pdfContent {
  margin-top: 16px;
}
.timestampBox {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 8px;
}
.icon {
  color: #666;
}
.timestamp {
  font-size: 0.8rem;
  color: #888;
}
.updatedBox {
  display: flex;
  align-items: center;
  gap: 4px;
}
.title {
  font-weight: bold;
  margin-top: 16px;
  text-align: center;
}
.sectionHeader {
  font-weight: bold;
  margin-bottom: 8px;
  text-align: left;
}
.paperContent {
  padding: 16px;
  background-color: #f9f9f9;
  border-radius: 8px;
}
.contentText {
  font-size: 1rem;
  color: #555;
  text-align: left;
  white-space: pre-line;
}
.userInfo {
  font-size: 0.9rem;
  color: #777;
  margin-top: 16px;
  text-align: center;
}
.relatedNewsItem {
  margin-top: 16px;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}
.relatedNewsLink {
  font-weight: 600;
  color: #388e3c;
  text-decoration: none;
}
.backButton {
  margin-top: 16px;
  text-transform: none;
}
.buttonContainer {
  text-align: center;
  margin-top: 16px;
}

/* Status badges (lama) */
.statusBadge {
  display: inline-flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  border-radius: 4px;
  font-weight: bold;
  margin-bottom: 8px;
}
.hoax {
  background-color: #ffebee;
  color: #d32f2f;
}
.valid {
  background-color: #e8f5e9;
  color: #388e3c;
}
.doubtful {
  background-color: #fff3e0;
  color: #f57c00;
}

/* Global dialog styling for modals (lama) */
.MuiDialogTitle-root {
  font-weight: bold;
  text-align: center;
}
.MuiDialogContent-root {
  text-align: center;
}
.MuiDialogActions-root {
  justify-content: center;
  gap: 8px;
}



// File: ./src/pages/Archives/DeleteArchiveDialog.jsx
import React, { useState } from 'react';

import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Typography,
} from '@mui/material';

import styles from './DeleteArchiveDialog.module.css';

const DeleteArchiveDialog = ({ open, onClose, onConfirm, archive }) => {
  const [confirmationText, setConfirmationText] = useState('');

  const handleChange = (e) => {
    setConfirmationText(e.target.value);
  };

  const handleConfirm = () => {
    if (confirmationText === 'Hapus') {
      onConfirm();
      setConfirmationText('');
    }
  };

  const handleClose = () => {
    setConfirmationText('');
    onClose();
  };

  if (!archive) return null;

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="xs" fullWidth>
      <DialogTitle className={styles.dialogTitle}>
        Konfirmasi Hapus Archive
      </DialogTitle>
      <DialogContent className={styles.dialogContent}>
        <Typography>
          Apakah Anda yakin ingin menghapus archive &apos;{archive.title}&apos;?
        </Typography>
        <Typography
          variant="body2"
          color="textSecondary"
          className={styles.confirmPrompt}
        >
          Ketik <strong>Hapus</strong> untuk mengonfirmasi.
        </Typography>
        <TextField
          fullWidth
          margin="dense"
          variant="outlined"
          placeholder="Ketik 'Hapus' di sini"
          value={confirmationText}
          onChange={handleChange}
          className={styles.confirmInput}
        />
      </DialogContent>
      <DialogActions className={styles.dialogActions}>
        <Button onClick={handleClose}>Batal</Button>
        <Button
          onClick={handleConfirm}
          color="error"
          variant="contained"
          disabled={confirmationText !== 'Hapus'}
        >
          Hapus
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default DeleteArchiveDialog;



// File: ./src/pages/Archives/DeleteArchiveDialog.module.css
.dialogTitle {
  font-weight: bold;
  text-align: center;
  font-size: 1.2rem;
  margin-bottom: 8px;
}

.dialogContent {
  text-align: center;
  padding: 16px;
}

.confirmPrompt {
  margin-top: 16px;
  margin-bottom: 8px;
}

.confirmInput {
  margin-top: 8px;
}

.dialogActions {
  display: flex;
  justify-content: center;
  gap: 8px;
  padding: 8px;
}



// File: ./src/pages/CreateReport/CreateReport.jsx
import React, { useState } from 'react';

import {
  Container,
  TextField,
  Button,
  Typography,
  Box,
  Alert,
  CircularProgress,
  LinearProgress,
  Snackbar,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import styles from './CreateReport.module.css';
import api from '../../services/api';

const CreateReport = () => {
  const navigate = useNavigate();
  const [form, setForm] = useState({ title: '', content: '', link: '' });
  const [file, setFile] = useState(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: 'success',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === 'title' && value.length > 50) return;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (e) => {
    setFile(e.target.files[0] || null);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    setProgress(0);

    let simulatedProgress = 0;
    const progressInterval = setInterval(() => {
      simulatedProgress += 10;
      if (simulatedProgress >= 99) {
        simulatedProgress = 99;
        clearInterval(progressInterval);
      }
      setProgress(simulatedProgress);
    }, 300);

    try {
      const formData = new FormData();
      formData.append('title', form.title);
      formData.append('content', form.content);
      if (form.link) formData.append('link', form.link);
      if (file) formData.append('document', file);

      const response = await api.post('/reports', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      const newReport = response.data.data;
      clearInterval(progressInterval);
      setProgress(100);
      setNotification({
        open: true,
        message: 'Laporan berhasil dibuat!',
        severity: 'success',
      });
      setTimeout(() => {
        setLoading(false);
        navigate(`/reports/${newReport.id}`);
      }, 1000);
    } catch (err) {
      clearInterval(progressInterval);
      setProgress(0);
      setLoading(false);
      setNotification({
        open: true,
        message: err.response?.data?.message || 'Gagal membuat laporan',
        severity: 'error',
      });
    }
  };

  const handleCloseNotification = (event, reason) => {
    if (reason === 'clickaway') return;
    setNotification((prev) => ({ ...prev, open: false }));
  };

  return (
    <Container maxWidth="sm" className={`mt-5 ${styles.createReportContainer}`}>
      {!loading && (
        <div className={`card ${styles.card}`}>
          <div className="card-body">
            <Typography
              variant="h4"
              gutterBottom
              align="center"
              className={styles.heading}
            >
              Create New Report
            </Typography>
            {error && (
              <Alert severity="error" className="mb-3">
                {error}
              </Alert>
            )}
            <form
              onSubmit={handleSubmit}
              className={styles.form}
              encType="multipart/form-data"
            >
              <TextField
                label="Title"
                name="title"
                value={form.title}
                onChange={handleChange}
                fullWidth
                margin="normal"
                required
                inputProps={{ maxLength: 50 }}
                helperText={`${form.title.length}/50`}
                className={styles.inputField}
              />
              <TextField
                label="Content"
                name="content"
                value={form.content}
                onChange={handleChange}
                fullWidth
                margin="normal"
                multiline
                rows={6}
                required
                className={styles.inputField}
              />
              <TextField
                label="Link (opsional)"
                name="link"
                value={form.link}
                onChange={handleChange}
                fullWidth
                margin="normal"
                className={styles.inputField}
              />
              <Box mt={2}>
                <Typography variant="body1" gutterBottom>
                  Upload Document/Foto (opsional):
                </Typography>
                <input
                  type="file"
                  name="document"
                  accept=".jpg,.jpeg,.png,.svg,.pdf,.doc,.docx"
                  onChange={handleFileChange}
                />
              </Box>
              <Box className={styles.buttonWrapper}>
                <Button
                  type="submit"
                  variant="contained"
                  color="primary"
                  fullWidth
                  disabled={loading}
                  className={styles.submitButton}
                >
                  Create Report
                </Button>
                {loading && (
                  <Box className={styles.loadingOverlay}>
                    <CircularProgress color="inherit" size={24} />
                    <Typography className={styles.processingText}>
                      Please wait, your report is being processed...
                    </Typography>
                  </Box>
                )}
              </Box>
            </form>
          </div>
        </div>
      )}
      {loading && (
        <Box className={styles.overlay}>
          <Box className={styles.progressContainer}>
            <Typography variant="h6" className={styles.progressText}>
              Processing: {progress}%
            </Typography>
            <LinearProgress
              variant="determinate"
              value={progress}
              className={styles.progressBar}
            />
            <Typography variant="h6" className={styles.processingText}>
              Mohon tunggu, laporan Anda sedang diproses.
            </Typography>
          </Box>
        </Box>
      )}
      <Snackbar
        open={notification.open}
        autoHideDuration={5000}
        onClose={handleCloseNotification}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={handleCloseNotification}
          severity={notification.severity}
          sx={{ width: '100%' }}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default CreateReport;



// File: ./src/pages/CreateReport/CreateReport.module.css
.createReportContainer {
  background-color: #ffffff;
  padding: 20px;
  border-radius: 8px;
  margin-top: 2rem;
}

.card {
  background: #ffffff;
  border-radius: 12px;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  padding: 2rem;
}

.heading {
  font-family: 'Roboto', sans-serif;
  color: #2c3e50;
  margin-bottom: 1.5rem;
}

.alert {
  margin-bottom: 1rem;
}

.form {
  width: 100%;
}

.inputField {
  margin-bottom: 1.5rem;
}

.buttonWrapper {
  position: relative;
  margin-top: 1.5rem;
}

.submitButton {
  padding: 12px;
  font-size: 1.1rem;
  border-radius: 8px;
  transition: background-color 0.3s ease;
}

.submitButton:hover {
  background-color: #0056b3;
}

/* Loading overlay (covers entire screen during processing) */
.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.95);
  z-index: 1300;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  pointer-events: all;
  padding: 1rem;
}

/* Progress container within overlay */
.progressContainer {
  width: 80%;
  max-width: 400px;
  text-align: center;
  margin-top: 1rem;
}

.progressText {
  font-size: 1.2rem;
  font-weight: 600;
  color: #4caf50;
  margin-bottom: 0.5rem;
}

.progressBar {
  width: 100%;
  background-color: #f0f0f0;
  border-radius: 10px;
  height: 10px;
  margin-bottom: 1rem;
}

.progress {
  height: 100%;
  border-radius: 10px;
}

/* Processing text */
.processingText {
  font-size: 1.1rem;
  margin-top: 0.5rem;
  color: #007bff;
}

/* Envelope Animation */
.letterImage {
  position: relative;
  width: 200px;
  height: 200px;
  margin: 0 auto 1rem;
}

.animatedMail {
  position: absolute;
  width: 200px;
  height: 150px;
  transition: 0.2s;
  animation-name: mail-animation;
  animation-duration: 5s; /* 2x lebih cepat dari referensi */
  animation-iteration-count: infinite;
}

.backFold,
.topFold,
.leftFold,
.body {
  display: none;
}

.letter {
  position: relative;
  width: 100%;
  height: 120px;
  background: #ffffff;
  border: 2px solid #4caf50;
  border-radius: 8px;
}

.letterBorder {
  height: 6px;
  width: 100%;
  background: #4caf50;
}

.letterTitle {
  margin-top: 10px;
  margin-left: 5px;
  height: 10px;
  width: 60%;
  background: #4caf50;
}

.letterContext {
  margin-top: 10px;
  margin-left: 5px;
  height: 10px;
  width: 20%;
  background: #4caf50;
}

.letterStamp {
  position: absolute;
  bottom: 8px;
  right: 8px;
  width: 30px;
  height: 30px;
  background-color: #4caf50;
  border-radius: 4px;
}

.letterStampInner {
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.8);
}

/* Optional Shadow for envelope */
.shadow {
  position: absolute;
  top: 200px;
  left: 50%;
  width: 400px;
  height: 30px;
  transform: translateX(-50%);
  border-radius: 100%;
  background: radial-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.0), rgba(0,0,0,0.0));
  animation-name: shadow-animation;
  animation-duration: 5s; /* 2x lebih cepat */
  animation-iteration-count: infinite;
}

@keyframes mail-animation {
  0% {
    transform: translateY(0);
    opacity: 1;
  }
  50% {
    transform: translateY(-10px);
    opacity: 0.8;
  }
  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes shadow-animation {
  0% { }
  25% { width: 250px; }
  90% { width: 250px; }
  100% { }
}



// File: ./src/pages/Dashboard/AdminDashboard/AdminDashboard.jsx
import React, { useEffect, useState } from 'react';

import 'chart.js/auto';
import { Box, Typography, Paper, Grid, Card, CardContent } from '@mui/material';
import { Bar, Pie, Line } from 'react-chartjs-2';

import styles from './AdminDashboard.module.css';
import api from '../../../services/api';

const AdminDashboard = () => {
  const [reports, setReports] = useState([]);
  const [users, setUsers] = useState([]);
  const [archives, setArchives] = useState([]);

  const currentUser = JSON.parse(localStorage.getItem('user'));

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Ambil semua laporan
        const reportsResponse = await api.get('/reports');
        // Admin: filter laporan milik user role="user" + laporan milik admin sendiri
        const filteredReports = reportsResponse.data.filter(
          (r) => r.user.role === 'user' || r.user.id === currentUser.id
        );
        setReports(filteredReports);

        // Ambil semua user, tapi admin cuma mau lihat user role="user"
        const usersResponse = await api.get('/users');
        const filteredUsers = usersResponse.data.filter(
          (u) => u.role === 'user'
        );
        setUsers(filteredUsers);

        // Ambil arsip
        const archivesResponse = await api.get('/archives');
        // (opsional) filter archives jika ingin.
        // Di contoh ini, admin bisa melihat semua atau filter sesuai kebijakan:
        setArchives(archivesResponse.data);
      } catch (error) {
        console.error('Error fetching admin dashboard data:', error);
      }
    };
    fetchData();
  }, [currentUser.id]);

  // --- Ringkasan data untuk summary cards ---
  const totalReports = reports.length;
  const totalArchives = archives.length;
  const totalUsers = users.length;

  // Contoh: hitung total hoax
  const statusCounts = reports.reduce((acc, r) => {
    acc[r.validationStatus] = (acc[r.validationStatus] || 0) + 1;
    return acc;
  }, {});
  const totalHoax = statusCounts['hoax'] || 0;

  // 1) Distribusi Laporan per Bulan (Bar)
  const distributionLabels = [
    ...new Set(
      reports.map((r) =>
        new Date(r.createdAt).toLocaleString('id-ID', {
          month: 'short',
          year: 'numeric',
        })
      )
    ),
  ];
  const distributionData = {
    labels: distributionLabels,
    datasets: [
      {
        label: 'Laporan per Bulan',
        data: distributionLabels.map(
          (label) =>
            reports.filter(
              (r) =>
                new Date(r.createdAt).toLocaleString('id-ID', {
                  month: 'short',
                  year: 'numeric',
                }) === label
            ).length
        ),
        backgroundColor: '#42a5f5',
      },
    ],
  };

  // 2) Status Validasi (Pie)
  const statusData = {
    labels: Object.keys(statusCounts),
    datasets: [
      {
        label: 'Status Validasi',
        data: Object.values(statusCounts),
        backgroundColor: ['#66bb6a', '#ffa726', '#ef5350', '#9e9e9e'],
      },
    ],
  };

  // Opsi chart global (Pie & Bar) => agar aspect ratio off
  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { position: 'bottom' },
      tooltip: { mode: 'index', intersect: false },
    },
  };

  // 3) Tren Laporan Harian (Line)
  const sortedReports = [...reports].sort(
    (a, b) => new Date(a.createdAt) - new Date(b.createdAt)
  );
  const dailyLabels = sortedReports.map((r) =>
    new Date(r.createdAt).toLocaleDateString('id-ID')
  );
  const dailyData = {
    labels: dailyLabels,
    datasets: [
      {
        label: 'Laporan Harian',
        data: dailyLabels.map(
          (label) =>
            sortedReports.filter(
              (r) => new Date(r.createdAt).toLocaleDateString('id-ID') === label
            ).length
        ),
        borderColor: '#42a5f5',
        fill: false,
      },
    ],
  };

  // 4) Manajemen Pengguna: jumlah laporan per user
  const userData = {
    labels: users.map((u) => u.username),
    datasets: [
      {
        label: 'Jumlah Laporan per User',
        data: users.map(
          (u) => reports.filter((r) => r.user.id === u.id).length
        ),
        backgroundColor: '#ab47bc',
      },
    ],
  };

  // 5) Arsip Laporan per Bulan (Bar)
  const archiveLabels = [
    ...new Set(
      archives.map((a) =>
        new Date(a.archivedAt).toLocaleString('id-ID', {
          month: 'short',
          year: 'numeric',
        })
      )
    ),
  ];
  const archiveData = {
    labels: archiveLabels,
    datasets: [
      {
        label: 'Arsip per Bulan',
        data: archiveLabels.map(
          (label) =>
            archives.filter(
              (a) =>
                new Date(a.archivedAt).toLocaleString('id-ID', {
                  month: 'short',
                  year: 'numeric',
                }) === label
            ).length
        ),
        backgroundColor: '#ff7043',
      },
    ],
  };

  // 6) Laporan oleh Admin (khusus admin => filter)
  // Di admin code, kita punya laporan "milik admin" =>
  // (r.user.role === 'admin' => tapi di filterReports, admin pun mungkin jarang,
  //  opsional: jika mau menampilkan data)
  const adminOnlyReports = reports.filter((r) => r.user.role === 'admin');
  const adminReportData = {
    labels: ['Laporan oleh Admin (Self)'],
    datasets: [
      {
        label: 'Jumlah Laporan Admin',
        data: [adminOnlyReports.length],
        backgroundColor: '#5c6bc0',
      },
    ],
  };

  // 7) Top 5 Pelapor
  // Hanya user yang ditampilkan => so top 5 user by count
  const userReportCounts = users
    .map((u) => ({
      username: u.username,
      count: reports.filter((r) => r.user.id === u.id).length,
    }))
    .sort((a, b) => b.count - a.count)
    .slice(0, 5);
  const topUserData = {
    labels: userReportCounts.map((u) => u.username),
    datasets: [
      {
        label: 'Top 5 Pelapor (User)',
        data: userReportCounts.map((u) => u.count),
        backgroundColor: '#26a69a',
      },
    ],
  };

  // 8) Trend Validasi Harian (Stacked Bar)
  const dateSet = [
    ...new Set(
      sortedReports.map((r) =>
        new Date(r.createdAt).toLocaleDateString('id-ID')
      )
    ),
  ];
  const trendData = {
    labels: dateSet,
    datasets: [
      {
        label: 'Valid',
        data: dateSet.map(
          (d) =>
            sortedReports.filter(
              (r) =>
                new Date(r.createdAt).toLocaleDateString('id-ID') === d &&
                r.validationStatus === 'valid'
            ).length
        ),
        backgroundColor: '#66bb6a',
      },
      {
        label: 'Hoax',
        data: dateSet.map(
          (d) =>
            sortedReports.filter(
              (r) =>
                new Date(r.createdAt).toLocaleDateString('id-ID') === d &&
                r.validationStatus === 'hoax'
            ).length
        ),
        backgroundColor: '#ef5350',
      },
      {
        label: 'Diragukan',
        data: dateSet.map(
          (d) =>
            sortedReports.filter(
              (r) =>
                new Date(r.createdAt).toLocaleDateString('id-ID') === d &&
                r.validationStatus === 'diragukan'
            ).length
        ),
        backgroundColor: '#ffa726',
      },
      {
        label: 'Unknown',
        data: dateSet.map(
          (d) =>
            sortedReports.filter(
              (r) =>
                new Date(r.createdAt).toLocaleDateString('id-ID') === d &&
                (r.validationStatus === 'unknown' ||
                  r.validationStatus === undefined)
            ).length
        ),
        backgroundColor: '#9e9e9e',
      },
    ],
  };

  return (
    <Box className={styles.dashboardContainer}>
      <Typography variant="h4" className={styles.dashboardTitle}>
        Admin Dashboard
      </Typography>

      {/* Summary Cards */}
      <Grid container spacing={2} className={styles.summaryRow}>
        <Grid item xs={12} sm={6} md={3}>
          <Card className={styles.summaryCard}>
            <CardContent>
              <Typography variant="subtitle2" className={styles.cardSubtitle}>
                Total Laporan
              </Typography>
              <Typography variant="h5" className={styles.cardValue}>
                {totalReports}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card className={styles.summaryCard}>
            <CardContent>
              <Typography variant="subtitle2" className={styles.cardSubtitle}>
                Arsip Laporan
              </Typography>
              <Typography variant="h5" className={styles.cardValue}>
                {totalArchives}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card className={styles.summaryCard}>
            <CardContent>
              <Typography variant="subtitle2" className={styles.cardSubtitle}>
                Pengguna
              </Typography>
              <Typography variant="h5" className={styles.cardValue}>
                {totalUsers}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card className={styles.summaryCard}>
            <CardContent>
              <Typography variant="subtitle2" className={styles.cardSubtitle}>
                Laporan Hoax
              </Typography>
              <Typography variant="h5" className={styles.cardValue}>
                {totalHoax}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Grid container spacing={3} alignItems="stretch">
        {/* 1 vs 2 */}
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Distribusi Laporan per Bulan
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar data={distributionData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Status Validasi Laporan
            </Typography>
            <div className={styles.chartWrapper}>
              <Pie data={statusData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>

        {/* 3 vs 4 */}
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Tren Laporan Harian
            </Typography>
            <div className={styles.chartWrapper}>
              <Line data={dailyData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Laporan per Pengguna
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar data={userData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>

        {/* 5 vs 6 */}
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Arsip Laporan per Bulan
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar data={archiveData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Laporan oleh Admin
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar data={adminReportData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>

        {/* 7 vs 8 */}
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Top 5 Pelapor
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar data={topUserData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Trend Validasi Harian
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar
                data={trendData}
                options={{
                  ...chartOptions,
                  scales: { x: { stacked: true }, y: { stacked: true } },
                }}
              />
            </div>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

export default AdminDashboard;



// File: ./src/pages/Dashboard/AdminDashboard/AdminDashboard.module.css
.dashboardContainer {
  padding: 2rem;
  margin-top: 0px; /* Agar tidak tertutup navbar */
  min-height: calc(100vh - 64px);
  background-color: #fefefe;
}

.dashboardTitle {
  text-align: left;
  font-weight: 700;
  margin-bottom: 1.5rem;
  color: #333;
}

.summaryRow {
  margin-bottom: 1rem;
}

.summaryCard {
  background-color: #fff;
  border-radius: 12px;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
}

.cardSubtitle {
  color: #666;
  font-weight: 500;
}

.cardValue {
  font-weight: 600;
  margin-top: 0.5rem;
  color: #111;
  font-size: 1.4rem;
}

.chartPaper {
  padding: 1.5rem;
  background-color: #fff;
  border-radius: 10px;
  margin-bottom: 1rem;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
}

.chartTitle {
  font-weight: 600;
  margin-bottom: 1rem;
  color: #555;
  text-align: center;
}

/* Agar 2 chart sebaris punya tinggi sama */
.equalBox {
  min-height: 400px; /* atur sesuai selera */
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

/* Bungkus canvas agar chart bisa expand */
.chartWrapper {
  flex: 1;
  position: relative;
  /* bisa tambahkan margin/padding */
}



// File: ./src/pages/Dashboard/Dashboard.jsx
import React, { useContext } from 'react';

import AdminDashboard from './AdminDashboard/AdminDashboard';
import OwnerDashboard from './OwnerDashboard/OwnerDashboard';
import UserDashboard from './UserDashboard/UserDashboard';
import { AuthContext } from '../../context/AuthContext';

const Dashboard = () => {
  const { auth } = useContext(AuthContext);

  if (!auth.isAuthenticated) {
    return null; // atau redirect ke /login
  }

  switch (auth.user.role) {
    case 'owner':
      return <OwnerDashboard />;
    case 'admin':
      return <AdminDashboard />;
    default:
      return <UserDashboard />;
  }
};

export default Dashboard;



// File: ./src/pages/Dashboard/Dashboard.module.css
.dashboardWrapper {
  margin-top: 80px; /* Pastikan tinggi Navbar (sesuaikan jika perlu) */
  padding: 1rem;
  min-height: calc(100vh - 80px);
  background-color: #f5f5f5;
}



// File: ./src/pages/Dashboard/OwnerDashboard/OwnerDashboard.jsx
import React, { useEffect, useState } from 'react';

import 'chart.js/auto';
import { Box, Typography, Paper, Grid, Card, CardContent } from '@mui/material';
import { Bar, Pie, Line } from 'react-chartjs-2';

import styles from './OwnerDashboard.module.css';
import api from '../../../services/api';

const OwnerDashboard = () => {
  const [reports, setReports] = useState([]);
  const [users, setUsers] = useState([]);
  const [archives, setArchives] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const reportsResponse = await api.get('/reports');
        setReports(reportsResponse.data);

        const usersResponse = await api.get('/users');
        setUsers(usersResponse.data);

        const archivesResponse = await api.get('/archives');
        setArchives(archivesResponse.data);
      } catch (error) {
        console.error('Error fetching owner dashboard data:', error);
      }
    };
    fetchData();
  }, []);

  // 1) Distribusi Laporan per Bulan (Bar)
  const distributionLabels = [
    ...new Set(
      reports.map((r) =>
        new Date(r.createdAt).toLocaleString('id-ID', {
          month: 'short',
          year: 'numeric',
        })
      )
    ),
  ];
  const distributionData = {
    labels: distributionLabels,
    datasets: [
      {
        label: 'Laporan per Bulan',
        data: distributionLabels.map(
          (label) =>
            reports.filter(
              (r) =>
                new Date(r.createdAt).toLocaleString('id-ID', {
                  month: 'short',
                  year: 'numeric',
                }) === label
            ).length
        ),
        backgroundColor: '#42a5f5',
      },
    ],
  };

  // 2) Status Validasi (Pie)
  const statusCounts = reports.reduce((acc, r) => {
    acc[r.validationStatus] = (acc[r.validationStatus] || 0) + 1;
    return acc;
  }, {});
  const statusData = {
    labels: Object.keys(statusCounts),
    datasets: [
      {
        label: 'Status Validasi',
        data: Object.values(statusCounts),
        backgroundColor: ['#66bb6a', '#ffa726', '#ef5350', '#9e9e9e'],
      },
    ],
  };

  // (contoh opsi) Agar Pie dan Bar sama-sama mengisi kontainer:
  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false, // nonaktifkan aspect ratio
    plugins: {
      legend: {
        position: 'bottom', // bisa 'top'|'bottom'|'left'|'right'
      },
      tooltip: {
        mode: 'index',
        intersect: false,
      },
    },
  };

  // 3) Tren Laporan Harian (Line)
  const sortedReports = [...reports].sort(
    (a, b) => new Date(a.createdAt) - new Date(b.createdAt)
  );
  const dailyLabels = sortedReports.map((r) =>
    new Date(r.createdAt).toLocaleDateString('id-ID')
  );
  const dailyData = {
    labels: dailyLabels,
    datasets: [
      {
        label: 'Laporan Harian',
        data: dailyLabels.map(
          (label) =>
            sortedReports.filter(
              (r) => new Date(r.createdAt).toLocaleDateString('id-ID') === label
            ).length
        ),
        fill: false,
        borderColor: '#42a5f5',
      },
    ],
  };

  // 4) Distribusi Pengguna (Bar) – berdasarkan role
  const userRoleCounts = users.reduce((acc, user) => {
    acc[user.role] = (acc[user.role] || 0) + 1;
    return acc;
  }, {});
  const userRoleData = {
    labels: Object.keys(userRoleCounts),
    datasets: [
      {
        label: 'Jumlah Pengguna',
        data: Object.values(userRoleCounts),
        backgroundColor: ['#8e24aa', '#3949ab', '#d81b60', '#ffa726'],
      },
    ],
  };

  // 5) Arsip Laporan per Bulan (Bar)
  const archiveLabels = [
    ...new Set(
      archives.map((a) =>
        new Date(a.archivedAt).toLocaleString('id-ID', {
          month: 'short',
          year: 'numeric',
        })
      )
    ),
  ];
  const archiveData = {
    labels: archiveLabels,
    datasets: [
      {
        label: 'Arsip per Bulan',
        data: archiveLabels.map(
          (label) =>
            archives.filter(
              (a) =>
                new Date(a.archivedAt).toLocaleString('id-ID', {
                  month: 'short',
                  year: 'numeric',
                }) === label
            ).length
        ),
        backgroundColor: '#ff7043',
      },
    ],
  };

  // 6) Laporan oleh Admin
  const adminReports = reports.filter((r) => r.user.role === 'admin');
  const adminReportData = {
    labels: ['Laporan oleh Admin'],
    datasets: [
      {
        label: 'Jumlah Laporan',
        data: [adminReports.length],
        backgroundColor: '#ab47bc',
      },
    ],
  };

  // 7) Top 5 Pelapor
  const userReportCounts = users
    .map((user) => ({
      username: user.username,
      count: reports.filter((r) => r.user.id === user.id).length,
    }))
    .sort((a, b) => b.count - a.count)
    .slice(0, 5);
  const topUserData = {
    labels: userReportCounts.map((u) => u.username),
    datasets: [
      {
        label: 'Top 5 Pelapor',
        data: userReportCounts.map((u) => u.count),
        backgroundColor: '#26a69a',
      },
    ],
  };

  // 8) Trend Validasi Harian (Stacked Bar)
  const trendDates = [
    ...new Set(
      sortedReports.map((r) =>
        new Date(r.createdAt).toLocaleDateString('id-ID')
      )
    ),
  ];
  const trendData = {
    labels: trendDates,
    datasets: [
      {
        label: 'Valid',
        data: trendDates.map(
          (date) =>
            sortedReports.filter(
              (r) =>
                new Date(r.createdAt).toLocaleDateString('id-ID') === date &&
                r.validationStatus === 'valid'
            ).length
        ),
        backgroundColor: '#66bb6a',
      },
      {
        label: 'Hoax',
        data: trendDates.map(
          (date) =>
            sortedReports.filter(
              (r) =>
                new Date(r.createdAt).toLocaleDateString('id-ID') === date &&
                r.validationStatus === 'hoax'
            ).length
        ),
        backgroundColor: '#ef5350',
      },
      {
        label: 'Diragukan',
        data: trendDates.map(
          (date) =>
            sortedReports.filter(
              (r) =>
                new Date(r.createdAt).toLocaleDateString('id-ID') === date &&
                r.validationStatus === 'diragukan'
            ).length
        ),
        backgroundColor: '#ffa726',
      },
      {
        label: 'Unknown',
        data: trendDates.map(
          (date) =>
            sortedReports.filter(
              (r) =>
                new Date(r.createdAt).toLocaleDateString('id-ID') === date &&
                (r.validationStatus === 'unknown' ||
                  r.validationStatus === undefined)
            ).length
        ),
        backgroundColor: '#9e9e9e',
      },
    ],
  };

  // -- Summary Cards --
  const totalReports = reports.length;
  const totalArchives = archives.length;
  const totalUsers = users.length;
  const totalHoax = statusCounts['hoax'] || 0;

  return (
    <Box className={styles.dashboardContainer}>
      <Typography variant="h4" className={styles.dashboardTitle}>
        Owner Dashboard
      </Typography>

      {/* Summary Cards */}
      <Grid container spacing={2} className={styles.summaryRow}>
        <Grid item xs={12} sm={6} md={3}>
          <Card className={styles.summaryCard}>
            <CardContent>
              <Typography variant="subtitle2" className={styles.cardSubtitle}>
                Total Laporan
              </Typography>
              <Typography variant="h5" className={styles.cardValue}>
                {totalReports}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card className={styles.summaryCard}>
            <CardContent>
              <Typography variant="subtitle2" className={styles.cardSubtitle}>
                Arsip Laporan
              </Typography>
              <Typography variant="h5" className={styles.cardValue}>
                {totalArchives}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card className={styles.summaryCard}>
            <CardContent>
              <Typography variant="subtitle2" className={styles.cardSubtitle}>
                Total Pengguna
              </Typography>
              <Typography variant="h5" className={styles.cardValue}>
                {totalUsers}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card className={styles.summaryCard}>
            <CardContent>
              <Typography variant="subtitle2" className={styles.cardSubtitle}>
                Laporan Hoax
              </Typography>
              <Typography variant="h5" className={styles.cardValue}>
                {totalHoax}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Grid container spacing={3} alignItems="stretch">
        {/* Bar vs Pie (distribusi vs status) */}
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Distribusi Laporan per Bulan
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar data={distributionData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Status Validasi Laporan
            </Typography>
            <div className={styles.chartWrapper}>
              <Pie data={statusData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>

        {/* daily line vs user role bar */}
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Tren Laporan Harian
            </Typography>
            <div className={styles.chartWrapper}>
              <Line data={dailyData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Distribusi Pengguna
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar data={userRoleData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>

        {/* archive vs adminReports */}
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Arsip Laporan per Bulan
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar data={archiveData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Laporan oleh Admin
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar data={adminReportData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>

        {/* topUser vs trendValidasi */}
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Top 5 Pelapor
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar data={topUserData} options={chartOptions} />
            </div>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper className={`${styles.chartPaper} ${styles.equalBox}`}>
            <Typography variant="h6" className={styles.chartTitle}>
              Trend Validasi Harian
            </Typography>
            <div className={styles.chartWrapper}>
              <Bar
                data={trendData}
                options={{
                  ...chartOptions,
                  scales: { x: { stacked: true }, y: { stacked: true } },
                }}
              />
            </div>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

export default OwnerDashboard;



// File: ./src/pages/Dashboard/OwnerDashboard/OwnerDashboard.module.css
.dashboardContainer {
  padding: 2rem;
  margin-top: 0px; /* agar tidak tertutup navbar */
  min-height: calc(100vh - 64px);
  background-color: #fafafa;
}

.dashboardTitle {
  text-align: left;
  font-weight: 700;
  margin-bottom: 1.5rem;
  color: #2e7d32;
}

.summaryRow {
  margin-bottom: 1rem;
}

.summaryCard {
  background-color: #ffffff;
  border-radius: 12px;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
}

.cardSubtitle {
  color: #666;
  font-weight: 500;
}

.cardValue {
  font-weight: 600;
  margin-top: 0.5rem;
  color: #111;
  font-size: 1.4rem;
}

.chartPaper {
  padding: 1.5rem;
  background-color: #fff;
  border-radius: 10px;
  margin-bottom: 1rem;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
}

.chartTitle {
  font-weight: 600;
  margin-bottom: 1rem;
  color: #555;
  text-align: center;
}

/* Buat tinggi minimal agar 2 chart sebaris tampak sama */
.equalBox {
  min-height: 400px; 
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

/* Bungkus canvas agar chart bisa expand */
.chartWrapper {
  flex: 1; 
  position: relative;
  /* bila perlu, atur margin/padding */
}



// File: ./src/pages/Dashboard/UserDashboard/UserDashboard.jsx
import React, { useEffect, useState } from 'react';

import 'chart.js/auto';
import {
  Box,
  Typography,
  Paper,
  Grid,
  CircularProgress,
  Alert,
} from '@mui/material';
import { Bar } from 'react-chartjs-2';

import styles from './UserDashboard.module.css';
import api from '../../../services/api';

const UserDashboard = () => {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    api
      .get('/reports')
      .then((res) => setReports(res.data))
      .catch(() => setError('Gagal memuat data dashboard'))
      .finally(() => setLoading(false));
  }, []);

  if (loading) {
    return (
      <Box
        className={styles.dashboardContainer}
        display="flex"
        justifyContent="center"
        alignItems="center"
      >
        <CircularProgress />
      </Box>
    );
  }
  if (error) {
    return (
      <Box className={styles.dashboardContainer}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  // Hitung status laporan
  const statusCounts = reports.reduce((acc, r) => {
    acc[r.validationStatus] = (acc[r.validationStatus] || 0) + 1;
    return acc;
  }, {});

  const total = reports.length;
  const valid = statusCounts.valid || 0;
  const hoax = statusCounts.hoax || 0;
  const diragukan = statusCounts.diragukan || 0;

  const chartData = {
    labels: ['Total', 'Valid', 'Hoax', 'Diragukan'],
    datasets: [
      {
        label: 'Jumlah Laporan',
        data: [total, valid, hoax, diragukan],
        backgroundColor: ['#42a5f5', '#66bb6a', '#ef5350', '#ffa726'],
      },
    ],
  };

  return (
    <Box className={styles.dashboardContainer}>
      <Typography variant="h4" className={styles.dashboardTitle}>
        User Dashboard
      </Typography>

      <Grid container spacing={2} className={styles.cardsGrid}>
        {[
          { label: 'Total Laporan', value: total, color: '#42a5f5' },
          { label: 'Valid', value: valid, color: '#66bb6a' },
          { label: 'Hoax', value: hoax, color: '#ef5350' },
          { label: 'Diragukan', value: diragukan, color: '#ffa726' },
        ].map((card) => (
          <Grid item xs={6} sm={3} key={card.label}>
            <Paper
              className={styles.statCard}
              style={{ borderTopColor: card.color }}
            >
              <Typography className={styles.statLabel}>{card.label}</Typography>
              <Typography className={styles.statValue}>{card.value}</Typography>
            </Paper>
          </Grid>
        ))}
      </Grid>

      <Paper className={styles.chartPaper}>
        <Typography variant="h6" className={styles.chartTitle}>
          Ringkasan Status Laporan
        </Typography>
        <Bar data={chartData} />
      </Paper>
    </Box>
  );
};

export default UserDashboard;



// File: ./src/pages/Dashboard/UserDashboard/UserDashboard.module.css
.dashboardContainer {
  padding: 1rem;                /* dikurangi dari 2rem */
  background-color: #f5f5f5;
  min-height: calc(100vh - 64px);
}

.dashboardTitle {
  margin-bottom: 1rem;          /* dikurangi dari 1.5rem */
  font-weight: 700;
  color: #1565c0;
}

.cardsGrid {
  margin-bottom: 1.5rem;        /* sedikit dikurangi */
}

/* Kartu ringkasan */
.statCard {
  padding: 0.75rem;             /* dikurangi dari 1rem */
  border-top: 4px solid;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 6px rgba(0,0,0,0.1); /* shadow dipermudah */
  text-align: center;
}

.statLabel {
  font-size: 0.85rem;           /* sedikit diperkecil */
  color: #555;
}

.statValue {
  font-size: 1.6rem;            /* sedikit diperkecil */
  font-weight: 600;
  color: #333;
  margin-top: 0.2rem;
}

/* Chart */
.chartPaper {
  padding: 1rem;                /* dikurangi dari 1.5rem */
  background-color: #fff;
  border-radius: 8px;           /* diperkecil */
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.chartTitle {
  text-align: center;
  margin-bottom: 0.75rem;       /* dikurangi dari 1rem */
  font-weight: 600;
  color: #1e88e5;
}



// File: ./src/pages/EditReport/EditReport.jsx
// File: ./src/pages/EditReport/EditReport.jsx
import React, { useState, useEffect } from 'react';

import {
  Container,
  TextField,
  Button,
  Typography,
  Box,
  Alert,
  CircularProgress,
  Snackbar,
} from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';

import styles from './EditReport.module.css';
import api from '../../services/api';

const EditReport = () => {
  const { reportId } = useParams();
  const navigate = useNavigate();

  const [form, setForm] = useState({ title: '', content: '', link: '' });
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: 'success',
  });
  const [editedBy, setEditedBy] = useState('');

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const response = await api.get(`/reports/${reportId}`);
        const data = response.data;
        setForm({
          title: data.title,
          content: data.content,
          link: data.link || '',
        });
        setEditedBy(data.user.username);
      } catch (err) {
        setError(err.response?.data?.message || 'Failed to load report');
      } finally {
        setLoading(false);
      }
    };
    fetchReport();
  }, [reportId]);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSubmitting(true);
    try {
      await api.put(`/reports/${reportId}`, form);
      setNotification({
        open: true,
        message: 'Report updated successfully!',
        severity: 'success',
      });
      // Redirect ke detail report setelah update
      setTimeout(() => {
        navigate(`/reports/${reportId}`);
      }, 1000);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to update report');
    } finally {
      setSubmitting(false);
    }
  };

  const handleCloseNotification = (event, reason) => {
    if (reason === 'clickaway') return;
    setNotification({ ...notification, open: false });
  };

  if (loading) {
    return (
      <Box
        className={styles.loadingContainer}
        display="flex"
        justifyContent="center"
        mt={5}
      >
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Container maxWidth="sm" className={styles.editReportContainer}>
      <Typography variant="h4" gutterBottom align="center">
        Edit Report
      </Typography>
      {error && (
        <Alert
          severity="error"
          onClose={() => setError('')}
          className={styles.alert}
        >
          {error}
        </Alert>
      )}
      <form onSubmit={handleSubmit} className={styles.form}>
        <TextField
          label="Title"
          name="title"
          value={form.title}
          onChange={handleChange}
          fullWidth
          margin="normal"
          required
          inputProps={{ maxLength: 50 }}
          helperText={`${form.title.length}/50`}
          className={styles.inputField}
        />
        <TextField
          label="Content"
          name="content"
          value={form.content}
          onChange={handleChange}
          fullWidth
          margin="normal"
          multiline
          rows={6}
          required
          className={styles.inputField}
        />
        <TextField
          label="Link (Optional)"
          name="link"
          value={form.link}
          onChange={handleChange}
          fullWidth
          margin="normal"
          className={styles.inputField}
        />
        <Box mt={2}>
          <Button
            type="submit"
            variant="contained"
            color="primary"
            fullWidth
            disabled={submitting}
          >
            {submitting ? 'Updating...' : 'Update Report'}
          </Button>
        </Box>
        <Box mt={2}>
          <Typography variant="body2" color="textSecondary">
            Laporan ini akan ditandai sebagai diedit oleh {editedBy}.
          </Typography>
        </Box>
      </form>
      <Snackbar
        open={notification.open}
        autoHideDuration={5000}
        onClose={handleCloseNotification}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={handleCloseNotification}
          severity={notification.severity}
          sx={{ width: '100%' }}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default EditReport;



// File: ./src/pages/EditReport/EditReport.module.css
.editReportContainer {
  background-color: #ffffff;
  padding: 20px;
  border-radius: 8px;
  margin-top: 2rem;
}

.form {
  width: 100%;
  margin-top: 1rem;
}

.inputField {
  margin-bottom: 1.5rem;
}

.alert {
  margin-bottom: 1rem;
}

.loadingContainer {
  margin-top: 2rem;
}

@media (max-width: 600px) {
  .editReportContainer {
    margin-top: 1rem;
    padding: 10px;
  }
}



// File: ./src/pages/LandingPage/LandingPage.jsx
import React, { useState, useEffect } from 'react';

import GroupIcon from '@mui/icons-material/Group';
import SecurityIcon from '@mui/icons-material/Security';
import VerifiedUserIcon from '@mui/icons-material/VerifiedUser';
import {
  Box,
  Container,
  Typography,
  Button,
  Grid,
  Snackbar,
  Alert,
} from '@mui/material';
import { Link as RouterLink, useLocation } from 'react-router-dom';

import styles from './LandingPage.module.css';

const LandingPage = () => {
  const location = useLocation();
  const [logoutSuccess, setLogoutSuccess] = useState(false);

  useEffect(() => {
    const params = new URLSearchParams(location.search);
    if (params.get('logoutSuccess') === 'true') {
      setLogoutSuccess(true);
    }
  }, [location.search]);

  const handleCloseSnackbar = (event, reason) => {
    if (reason === 'clickaway') return;
    setLogoutSuccess(false);
  };

  return (
    <Box className={styles.landingContainer}>
      {/* HERO SECTION */}
      <Box className={styles.heroSection}>
        <Box className={styles.heroOverlay}>
          <Container maxWidth="md" className={styles.heroContent}>
            <Typography variant="h3" className={styles.heroTitle} gutterBottom>
              Hamlet Information System
            </Typography>
            <Typography
              variant="h6"
              className={styles.heroSubtitle}
              gutterBottom
            >
              Aplikasi web untuk memfasilitasi komunikasi dan manajemen
              informasi di tingkat desa,
              <br />
              dengan fitur hoaks checker.
            </Typography>
            <Button
              variant="contained"
              size="large"
              component={RouterLink}
              to="/login"
              className={styles.heroButton}
            >
              Mulai Sekarang
            </Button>
          </Container>
        </Box>
      </Box>

      {/* FEATURES SECTION */}
      <Box className={styles.featuresSection}>
        <Container maxWidth="lg">
          <Typography
            variant="h4"
            className={styles.sectionTitle}
            align="center"
            gutterBottom
          >
            Fitur Unggulan
          </Typography>
          <Grid container spacing={4} justifyContent="center">
            <Grid item xs={12} sm={6} md={4}>
              <Box className={styles.featureCard}>
                <SecurityIcon className={styles.featureIcon} />
                <Typography variant="h6" className={styles.featureTitle}>
                  Hoaks Checker
                </Typography>
                <Typography variant="body2" className={styles.featureDesc}>
                  Periksa validitas informasi dengan cepat dan akurat.
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={12} sm={6} md={4}>
              <Box className={styles.featureCard}>
                <VerifiedUserIcon className={styles.featureIcon} />
                <Typography variant="h6" className={styles.featureTitle}>
                  Verifikasi Data
                </Typography>
                <Typography variant="body2" className={styles.featureDesc}>
                  Proses verifikasi yang transparan dan terpercaya.
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={12} sm={6} md={4}>
              <Box className={styles.featureCard}>
                <GroupIcon className={styles.featureIcon} />
                <Typography variant="h6" className={styles.featureTitle}>
                  Kolaborasi Multi-Peran
                </Typography>
                <Typography variant="body2" className={styles.featureDesc}>
                  Dukungan peran Owner, Admin, dan User untuk pengelolaan yang
                  terintegrasi.
                </Typography>
              </Box>
            </Grid>
          </Grid>
        </Container>
      </Box>

      {/* CTA SECTION */}
      <Box className={styles.ctaSection}>
        <Container maxWidth="sm" className={styles.ctaContainer}>
          <Typography variant="h5" className={styles.ctaTitle} gutterBottom>
            Bangun Desa Cerdas Anda
          </Typography>
          <Typography
            variant="body1"
            className={styles.ctaSubtitle}
            gutterBottom
          >
            Bergabunglah sekarang untuk mewujudkan sistem informasi desa yang
            efektif dan bebas hoaks.
          </Typography>
          <Button
            variant="contained"
            size="large"
            component={RouterLink}
            to="/login"
            className={styles.ctaButton}
          >
            Masuk
          </Button>
        </Container>
      </Box>

      {/* FOOTER */}
      <Box component="footer" className={styles.footer}>
        <Container maxWidth="lg" className={styles.footerContent}>
          <Typography variant="body2" align="center">
            © {new Date().getFullYear()} Hamlet Information System. All rights
            reserved.
          </Typography>
        </Container>
      </Box>

      {/* Notifikasi berhasil logout */}
      <Snackbar
        open={logoutSuccess}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity="success"
          sx={{ width: '100%' }}
        >
          Berhasil logout!
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default LandingPage;



// File: ./src/pages/LandingPage/LandingPage.module.css
.landingContainer {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  width: 100%;
  margin: 0;
  padding: 0;
  text-align: center;
  font-family: 'Roboto', sans-serif;
}

.heroSection {
  position: relative;
  width: 100%;
  height: 70vh;
  background: url('../../assets/images/landingPage.jpg') center/cover no-repeat;
  display: flex;
  justify-content: center;
  align-items: center;
}

.heroOverlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 128, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}

.heroContent {
  position: relative;
  max-width: 700px;
  padding: 2rem;
  color: #fff;
  z-index: 2;
  border-radius: 8px;
}

.heroTitle {
  font-weight: 700;
  margin-bottom: 1rem;
  text-transform: uppercase;
  font-size: 2.5rem;
}

.heroSubtitle {
  font-weight: 400;
  line-height: 1.6;
  margin-bottom: 2rem;
  font-size: 1.2rem;
}

.heroButton {
  background-color: #88c273;
  color: #fff;
  font-weight: 600;
  text-transform: none;
  padding: 0.8rem 2rem;
  border-radius: 6px;
  transition: background-color 0.3s ease;
  font-size: 1.1rem;
}

.heroButton:hover {
  background-color: #6fa055;
}

.featuresSection {
  padding: 4rem 0;
  background-color: #f7f7f7;
}

.sectionTitle {
  font-weight: 700;
  margin-bottom: 2rem;
  font-size: 2rem;
}

.featureCard {
  background-color: #fff;
  border-radius: 8px;
  padding: 2rem 1.5rem;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  transition: transform 0.2s, box-shadow 0.2s;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.featureCard:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
}

.featureIcon {
  font-size: 3rem;
  color: #88c273;
  margin-bottom: 1rem;
}

.featureTitle {
  font-weight: 600;
  margin-bottom: 0.5rem;
  font-size: 1.25rem;
}

.featureDesc {
  color: #666;
  line-height: 1.4;
  font-size: 0.95rem;
}

.ctaSection {
  background-color: #eafce5;
  padding: 3rem 0;
}

.ctaContainer {
  background-color: #fff;
  border-radius: 8px;
  padding: 2rem;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  text-align: center;
}

.ctaTitle {
  font-weight: 700;
  margin-bottom: 1rem;
  font-size: 1.8rem;
}

.ctaSubtitle {
  color: #555;
  margin-bottom: 2rem;
  line-height: 1.5;
  font-size: 1rem;
}

.ctaButton {
  background-color: #88c273;
  color: #fff;
  font-weight: 600;
  text-transform: none;
  padding: 0.8rem 2rem;
  border-radius: 6px;
  transition: background-color 0.3s ease;
  font-size: 1rem;
}

.ctaButton:hover {
  background-color: #6fa055;
}

.footer {
  background-color: #f1f3f4;
  padding: 1.5rem 0;
  margin-top: auto;
}

.footerContent {
  text-align: center;
  color: #777;
  font-size: 0.9rem;
}



// File: ./src/pages/Login/Login.jsx
import React, { useState, useContext } from 'react';

import LoginIcon from '@mui/icons-material/Login';
import PersonOutlineIcon from '@mui/icons-material/PersonOutline';
import {
  Box,
  Card,
  CardContent,
  Grid,
  Typography,
  TextField,
  Button,
  Alert,
  InputAdornment,
  IconButton,
  CircularProgress,
  Avatar,
} from '@mui/material';
import { FaEye, FaEyeSlash } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';

import styles from './Login.module.css';
import { AuthContext } from '../../context/AuthContext';

const Login = () => {
  const navigate = useNavigate();
  const { login } = useContext(AuthContext);

  const [form, setForm] = useState({ username: '', password: '' });
  const [error, setError] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);

  // Handle perubahan input
  const handleChange = (e) => {
    setForm((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  // Submit form login
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    try {
      await login(form);
      navigate('/dashboard');
    } catch (err) {
      const message =
        err.response?.data?.message || 'Username atau password salah';
      setError(message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box className={styles.loginPage}>
      <Card className={styles.loginCard}>
        <Grid container className={styles.gridContainer}>
          {/* Bagian kiri: form login */}
          <Grid item xs={12} md={6} className={styles.leftSide}>
            <CardContent className={styles.cardContent}>
              <Avatar className={styles.avatarIcon}>
                <PersonOutlineIcon fontSize="large" />
              </Avatar>

              <Typography
                variant="h5"
                className={styles.loginTitle}
                gutterBottom
              >
                LOGIN
              </Typography>

              {error && (
                <Alert
                  severity="error"
                  onClose={() => setError('')}
                  className={styles.errorAlert}
                >
                  {error}
                </Alert>
              )}

              <form onSubmit={handleSubmit} className={styles.loginForm}>
                <TextField
                  label="Username"
                  name="username"
                  value={form.username}
                  onChange={handleChange}
                  fullWidth
                  required
                  className={styles.inputField}
                />

                <TextField
                  label="Password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  value={form.password}
                  onChange={handleChange}
                  fullWidth
                  required
                  className={styles.inputField}
                  InputProps={{
                    endAdornment: (
                      <InputAdornment position="end">
                        <IconButton
                          onClick={() => setShowPassword((prev) => !prev)}
                          edge="end"
                        >
                          {showPassword ? <FaEyeSlash /> : <FaEye />}
                        </IconButton>
                      </InputAdornment>
                    ),
                  }}
                />

                <div className={styles.formButtonContainer}>
                  <Button
                    type="submit"
                    variant="contained"
                    disabled={loading}
                    className={styles.loginButton}
                  >
                    <LoginIcon className={styles.loginButtonIcon} />
                    <span className={styles.loginButtonText}>Login</span>
                  </Button>

                  {loading && (
                    <CircularProgress
                      className={styles.loadingIndicator}
                      size={24}
                    />
                  )}
                </div>
              </form>
            </CardContent>
          </Grid>

          {/* Bagian kanan: gambar ilustrasi */}
          <Grid item xs={12} md={6} className={styles.rightSide}>
            <img
              src={require('../../assets/images/loginPage.gif')}
              alt="Login Illustration"
              className={styles.loginImage}
            />
          </Grid>
        </Grid>
      </Card>
    </Box>
  );
};

export default Login;



// File: ./src/pages/Login/Login.module.css
/* Halaman login: latar belakang hijau muda */
.loginPage {
  min-height: 100vh;
  background-color: #eafce5; /* Hijau muda lembut */
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  box-sizing: border-box;
}

/* Card utama yang memuat grid form + gambar */
.loginCard {
  width: 100%;
  max-width: 700px;
  border-radius: 12px;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

/* Grid container di dalam card */
.gridContainer {
  height: 100%;
}

/* Bagian kiri: form login */
.leftSide {
  background-color: #ffffff;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* CardContent agar form di tengah */
.cardContent {
  width: 100%;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Avatar icon di atas */
.avatarIcon {
  background-color: #88c273;
  margin-bottom: 1rem;
}

.avatarIcon svg {
  fill: #fff;
}

/* Judul LOGIN */
.loginTitle {
  font-weight: 700;
  color: #2c3e50;
  margin-bottom: 1rem;
  text-transform: uppercase;
}

/* Alert error */
.errorAlert {
  width: 100%;
  margin-bottom: 1rem;
}

/* Form login */
.loginForm {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

/* Beri jarak antar input */
.inputField {
  margin-bottom: 0.5rem;
  margin-top: 0.5rem; /* jarak vertikal antar kolom */
}

/* Container tombol + loading indicator */
.formButtonContainer {
  position: relative;
  margin-top: 1rem;
}

/* Tombol login */
.loginButton {
  background-color: #88c273;
  color: #fff !important; /* Pastikan teks putih */
  /* font-weight: 300; */
  text-transform: none;
  padding: 0.75rem;
  border-radius: 6px;
  transition: background-color 0.3s ease;
  font-size: 1.5rem;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.loginButton:hover {
  background-color: #6fa055;
}

/* Ikon & teks di dalam tombol */
.loginButtonIcon {
  color: #fff !important;
  font-size: 1.2rem;
  margin-right: 8px; /* jarak ikon ke teks */
}

.loginButtonText {
  font-weight: bold;
}

/* Loading indicator di atas tombol */
.loadingIndicator {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/* Bagian kanan: gambar ilustrasi */
.rightSide {
  background-color: #f9f9f9;
  display: flex;
  align-items: center;
  justify-content: center;
}

.loginImage {
  max-width: 100%;
  height: auto;
  object-fit: cover;
  padding: 2rem;
  box-sizing: border-box;
}

/* Responsif: jika layar kecil, grid item akan menumpuk (gambar di bawah) */
@media (max-width: 900px) {
  .loginImage {
    padding: 1.5rem;
  }
}



// File: ./src/pages/NotFound/NotFound.jsx
import React from 'react';

import { Container, Typography, Box, Button } from '@mui/material';
import { Link } from 'react-router-dom';

const NotFound = () => {
  return (
    <Container>
      <Box mt={10} textAlign="center">
        <Typography variant="h3" gutterBottom>
          404 - Page Not Found
        </Typography>
        <Typography variant="body1" gutterBottom>
          Oops! The page you are looking for does not exist.
        </Typography>
        <Button
          variant="contained"
          color="primary"
          component={Link}
          to="/dashboard"
        >
          Go to Dashboard
        </Button>
      </Box>
    </Container>
  );
};

export default NotFound;



// File: ./src/pages/Profile/Profile.module.css
.profileContainer {
  margin-top: 2rem;
  margin-bottom: 2rem;
  display: flex;
  justify-content: center;
}

.profileCard {
  padding: 1.5rem 2rem;
  background-color: #ffffff;
  border-radius: 12px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  width: 100%;
}

.alert {
  margin-bottom: 1rem;
}

.loadingContainer {
  margin-top: 3rem;
  display: flex;
  justify-content: center;
}

/* Header: Avatar dan Nama */
.headerSection {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1rem;
}

.avatar {
  width: 80px !important;
  height: 80px !important;
  font-size: 2rem !important;
  background-color: #88c273 !important;
  color: #fff !important;
}

.titleBox {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.fullName {
  font-weight: 700;
  color: #333;
}

/* Info Grid */
.infoGrid {
  margin-top: 1rem;
}

.infoLabel {
  font-weight: 600;
  color: #777;
}

.infoValue {
  color: #444;
  margin-left: 0.5rem;
}

/* Tombol pada tampilan view */
.buttonContainer {
  display: flex;
  justify-content: center;
  margin-top: 2rem;
}

/* Edit Form */
.editForm {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

/* Label untuk field tambahan */
.fieldLabel {
  margin-top: 1rem;
  font-weight: 600;
}

/* Container preview foto */
.photoPreviewBox {
  margin-top: 1rem;
  margin-bottom: 0.5rem;
  text-align: center;
}

.photoPreview {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #88c273;
}

/* Tombol di form edit */
.formButtonContainer {
  margin-top: 2rem;
  display: flex;
  gap: 1rem;
  justify-content: center;
}

.profileTitle {
  text-align: center;
  margin-bottom: 1.5rem;
  font-weight: bold;
}

/* Tambahan styling untuk NotificationDialog jika diperlukan */
.notificationDialogPaper {
  position: fixed;
  top: 20px;
  right: 20px;
  margin: 0;
  padding: 8px 16px;
  min-width: 300px;
}



// File: ./src/pages/Profile/ProfileEdit.jsx
import React, { useContext, useEffect, useState, useCallback } from 'react';

import {
  Container,
  Typography,
  Box,
  Button,
  TextField,
  CircularProgress,
  MenuItem,
  Slider,
  Card,
  CardContent,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import styles from './Profile.module.css';
import NotificationDialog from '../../components/LogoutDialog/NotificationDialog';
import { AuthContext } from '../../context/AuthContext';
import api from '../../services/api';

const ProfileEdit = () => {
  const { auth, setAuth } = useContext(AuthContext);
  const [editForm, setEditForm] = useState({
    email: '',
    fullName: '',
    address: '',
    gender: 'Pria',
    age: 25,
  });
  const [photoPreview, setPhotoPreview] = useState('');
  const [photoFile, setPhotoFile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [updating, setUpdating] = useState(false);
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: '', // 'success' atau 'error'
  });
  const navigate = useNavigate();

  const fetchProfile = useCallback(async () => {
    setLoading(true);
    try {
      const response = await api.get('/users/me');
      const { email, fullName, address, gender, age, photo } = response.data;
      setEditForm({
        email,
        fullName: fullName || '',
        address: address || '',
        gender: gender || 'Pria',
        age: age || 25,
      });
      setPhotoPreview(photo || '');
    } catch (err) {
      setNotification({
        open: true,
        message: err.response?.data?.message || 'Gagal mengambil data profil',
        severity: 'error',
      });
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchProfile();
  }, [fetchProfile]);

  const handleChange = (e) => {
    setEditForm({ ...editForm, [e.target.name]: e.target.value });
  };

  const handleAgeChange = (e, newValue) => {
    setEditForm({ ...editForm, age: newValue });
  };

  const handlePhotoChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setPhotoFile(e.target.files[0]);
      setPhotoPreview(URL.createObjectURL(e.target.files[0]));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setNotification({ open: false, message: '', severity: '' });
    setUpdating(true);
    try {
      const formData = new FormData();
      formData.append('email', editForm.email);
      formData.append('fullName', editForm.fullName);
      formData.append('address', editForm.address);
      formData.append('gender', editForm.gender);
      formData.append('age', editForm.age);
      if (photoFile) {
        formData.append('photo', photoFile);
      }
      const response = await api.put('/users/profile', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      const updatedProfile = response.data.data;
      setAuth({ ...auth, user: updatedProfile });
      localStorage.setItem('user', JSON.stringify(updatedProfile));
      setNotification({
        open: true,
        message: 'Profil berhasil diperbarui.',
        severity: 'success',
      });
      setTimeout(() => {
        navigate('/profile');
      }, 1500);
    } catch (err) {
      setNotification({
        open: true,
        message: err.response?.data?.message || 'Gagal memperbarui profil',
        severity: 'error',
      });
    } finally {
      setUpdating(false);
    }
  };

  if (loading) {
    return (
      <Box className={styles.loadingContainer}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Container maxWidth="sm" className={styles.profileContainer}>
      <Card className={styles.profileCard}>
        <CardContent>
          <Typography
            variant="h4"
            align="center"
            className={styles.profileTitle}
          >
            Edit Profil Saya
          </Typography>
          <Box
            component="form"
            onSubmit={handleSubmit}
            className={styles.editForm}
          >
            <TextField
              label="Email"
              name="email"
              type="email"
              value={editForm.email}
              onChange={handleChange}
              margin="normal"
              fullWidth
              required
            />
            <TextField
              label="Nama Lengkap"
              name="fullName"
              value={editForm.fullName}
              onChange={handleChange}
              margin="normal"
              fullWidth
            />
            <TextField
              label="Address"
              name="address"
              value={editForm.address}
              onChange={handleChange}
              margin="normal"
              fullWidth
            />
            <TextField
              select
              label="Gender"
              name="gender"
              value={editForm.gender}
              onChange={handleChange}
              margin="normal"
              fullWidth
              required
            >
              <MenuItem value="Pria">Pria</MenuItem>
              <MenuItem value="Wanita">Wanita</MenuItem>
            </TextField>
            <Typography variant="subtitle1" className={styles.fieldLabel}>
              Age: {editForm.age}
            </Typography>
            <Slider
              value={editForm.age}
              onChange={handleAgeChange}
              valueLabelDisplay="auto"
              min={15}
              max={80}
              marks={[
                { value: 15, label: '15' },
                { value: 80, label: '80' },
              ]}
              sx={{ marginY: 2 }}
            />
            <Box mt={2}>
              <Typography variant="body1">Ganti Foto Profil:</Typography>
              <Box className={styles.photoPreviewBox}>
                <img
                  src={photoPreview || '/default-profile.png'}
                  alt="Preview"
                  className={styles.photoPreview}
                />
              </Box>
              <input
                type="file"
                name="photo"
                accept="image/jpeg,image/png,image/svg+xml"
                onChange={handlePhotoChange}
              />
            </Box>
            <Box className={styles.formButtonContainer}>
              <Button onClick={() => navigate('/profile')} color="secondary">
                Batal
              </Button>
              <Button
                type="submit"
                variant="contained"
                color="primary"
                disabled={updating}
              >
                {updating ? 'Memperbarui...' : 'Simpan'}
              </Button>
            </Box>
          </Box>
        </CardContent>
      </Card>
      {/* Menampilkan notifikasi sebagai dialog di tengah layar */}
      <NotificationDialog
        open={notification.open}
        message={notification.message}
        severity={notification.severity}
        onClose={() => setNotification({ ...notification, open: false })}
      />
    </Container>
  );
};

export default ProfileEdit;



// File: ./src/pages/Profile/ProfileView.jsx
import React, { useEffect, useState } from 'react';

import {
  Container,
  Typography,
  Box,
  Button,
  Alert,
  CircularProgress,
  Card,
  CardContent,
  Avatar,
  Grid,
  Divider,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import styles from './Profile.module.css';
import api from '../../services/api';

const ProfileView = () => {
  const [profile, setProfile] = useState({
    username: '',
    role: '',
    fullName: '',
    email: '',
    address: '',
    gender: '',
    age: '',
    photo: '',
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const fetchProfile = async () => {
    setLoading(true);
    try {
      const response = await api.get('/users/me');
      const { username, role, fullName, email, address, gender, age, photo } =
        response.data;
      setProfile({
        username,
        role,
        fullName: fullName || '',
        email,
        address: address || '',
        gender: gender || '',
        age: age || '',
        photo: photo || '',
      });
    } catch (err) {
      setError(err.response?.data?.message || 'Gagal mengambil data profil');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProfile();
  }, []);

  if (loading) {
    return (
      <Box className={styles.loadingContainer}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Container maxWidth="md" className={styles.profileContainer}>
      <Card className={styles.profileCard}>
        <CardContent>
          {error && (
            <Alert severity="error" className={styles.alert} onClose={() => {}}>
              {error}
            </Alert>
          )}

          <Box className={styles.headerSection}>
            <Avatar
              src={profile.photo || '/default-profile.png'}
              className={styles.avatar}
            >
              {!profile.photo &&
                (profile.fullName?.[0]?.toUpperCase() ||
                  profile.username[0]?.toUpperCase())}
            </Avatar>
            <Box className={styles.titleBox}>
              <Typography variant="h5" className={styles.fullName}>
                {profile.fullName || profile.username}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                {profile.role.toUpperCase()}
              </Typography>
            </Box>
          </Box>

          <Divider sx={{ marginY: 2 }} />

          <Grid container spacing={2} className={styles.infoGrid}>
            <Grid item xs={12} sm={6}>
              <Typography variant="body1" className={styles.infoLabel}>
                Username
              </Typography>
              <Typography variant="subtitle1" className={styles.infoValue}>
                {profile.username}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography variant="body1" className={styles.infoLabel}>
                Role
              </Typography>
              <Typography variant="subtitle1" className={styles.infoValue}>
                {profile.role}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography variant="body1" className={styles.infoLabel}>
                Nama Lengkap
              </Typography>
              <Typography variant="subtitle1" className={styles.infoValue}>
                {profile.fullName}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography variant="body1" className={styles.infoLabel}>
                Email
              </Typography>
              <Typography variant="subtitle1" className={styles.infoValue}>
                {profile.email}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography variant="body1" className={styles.infoLabel}>
                Address
              </Typography>
              <Typography variant="subtitle1" className={styles.infoValue}>
                {profile.address || '-'}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography variant="body1" className={styles.infoLabel}>
                Gender
              </Typography>
              <Typography variant="subtitle1" className={styles.infoValue}>
                {profile.gender || '-'}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography variant="body1" className={styles.infoLabel}>
                Age
              </Typography>
              <Typography variant="subtitle1" className={styles.infoValue}>
                {profile.age || '-'}
              </Typography>
            </Grid>
          </Grid>

          <Box className={styles.buttonContainer}>
            <Button
              variant="contained"
              color="primary"
              onClick={() => navigate('/profile/edit')}
            >
              Perbarui Profil
            </Button>
          </Box>
        </CardContent>
      </Card>
    </Container>
  );
};

export default ProfileView;



// File: ./src/pages/Register/Register.jsx
import React, { useState, useContext } from 'react';

import {
  Container,
  Typography,
  Box,
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Alert,
} from '@mui/material';

import { AuthContext } from '../../context/AuthContext';
import api from '../../services/api';

const Register = () => {
  const { auth } = useContext(AuthContext);
  const [form, setForm] = useState({
    username: '',
    email: '',
    password: '',
    role: 'user',
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  if (
    !auth.isAuthenticated ||
    (auth.user.role !== 'admin' && auth.user.role !== 'owner')
  ) {
    return (
      <Typography variant="h6" align="center" mt={5}>
        Access Denied
      </Typography>
    );
  }

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    try {
      const response = await api.post('/auth/register', form);
      setSuccess(response.data.message);
      setForm({ username: '', email: '', password: '', role: 'user' });
    } catch (err) {
      setError(err.response?.data?.message || 'Registration failed');
    }
  };

  return (
    <Container maxWidth="sm">
      <Box mt={5}>
        <Typography variant="h4" gutterBottom>
          Register New User
        </Typography>
        {error && (
          <Alert severity="error" onClose={() => setError('')}>
            {error}
          </Alert>
        )}
        {success && (
          <Alert severity="success" onClose={() => setSuccess('')}>
            {success}
          </Alert>
        )}
        <form onSubmit={handleSubmit}>
          <TextField
            label="Username"
            name="username"
            value={form.username}
            onChange={handleChange}
            fullWidth
            margin="normal"
            required
          />
          <TextField
            label="Email"
            name="email"
            type="email"
            value={form.email}
            onChange={handleChange}
            fullWidth
            margin="normal"
            required
          />
          <TextField
            label="Password"
            name="password"
            type="password"
            value={form.password}
            onChange={handleChange}
            fullWidth
            margin="normal"
            required
          />
          <FormControl fullWidth margin="normal">
            <InputLabel id="role-label">Role</InputLabel>
            <Select
              labelId="role-label"
              name="role"
              value={form.role}
              label="Role"
              onChange={handleChange}
            >
              <MenuItem value="user">User</MenuItem>
              <MenuItem value="admin">Admin</MenuItem>
              <MenuItem value="owner">Owner</MenuItem>
            </Select>
          </FormControl>
          <Box mt={2}>
            <Button type="submit" variant="contained" color="primary" fullWidth>
              Register User
            </Button>
          </Box>
        </form>
      </Box>
    </Container>
  );
};

export default Register;



// File: ./src/pages/ReportDetail/ReportDetail.jsx
import React, { useEffect, useState, useRef } from 'react';

import AccessTimeIcon from '@mui/icons-material/AccessTime';
import CancelIcon from '@mui/icons-material/Cancel';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import InfoIcon from '@mui/icons-material/Info';
import PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';
import UpdateIcon from '@mui/icons-material/Update';
import VerifiedUserIcon from '@mui/icons-material/VerifiedUser';
import {
  Container,
  Typography,
  Box,
  CircularProgress,
  Alert,
  Button,
  Paper,
  Snackbar,
} from '@mui/material';
import html2pdf from 'html2pdf.js';
import { useParams, useNavigate } from 'react-router-dom';

import styles from './ReportDetail.module.css';
import api from '../../services/api';

const ReportDetail = () => {
  const { reportId } = useParams();
  const navigate = useNavigate();
  const contentRef = useRef(null);

  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isEdited, setIsEdited] = useState(false);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'info',
  });

  useEffect(() => {
    if (!reportId) {
      setError('ID laporan tidak ditemukan.');
      setLoading(false);
      return;
    }
    const fetchReport = async () => {
      try {
        const response = await api.get(`/reports/${reportId}`);
        setReport(response.data);
        if (
          response.data.updatedAt &&
          response.data.updatedAt !== response.data.createdAt
        ) {
          setIsEdited(true);
        }
      } catch (err) {
        setError(
          err.response?.data?.message || 'Gagal mengambil detail laporan'
        );
      } finally {
        setLoading(false);
      }
    };
    fetchReport();
  }, [reportId]);

  const handleBack = () => {
    navigate('/reports');
  };

  const formatDateWIB = (dateStr) => {
    const options = {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    };
    return new Date(dateStr).toLocaleString('id-ID', options) + ' WIB';
  };

  // Parsing validationDetails
  let fullValidationText = '';
  try {
    if (report.validationDetails) {
      const parsed = JSON.parse(report.validationDetails);
      fullValidationText = parsed.gemini?.output || '';
    }
  } catch (err) {
    fullValidationText = '';
  }
  const validationText =
    fullValidationText.trim().split(/\s+/).length > 1
      ? fullValidationText.trim().split(/\s+/).slice(1).join(' ')
      : fullValidationText || 'N/A';

  const handleDownloadPDF = () => {
    if (contentRef.current) {
      setSnackbar({
        open: true,
        message: 'Downloading PDF...',
        severity: 'info',
      });
      const opt = {
        margin: 0.5,
        filename: `${report.title}.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' },
      };
      html2pdf()
        .set(opt)
        .from(contentRef.current)
        .save()
        .then(() => {
          setSnackbar({
            open: true,
            message: 'Download successful!',
            severity: 'success',
          });
        })
        .catch((err) => {
          console.error(err);
          setSnackbar({
            open: true,
            message: 'Download failed!',
            severity: 'error',
          });
        });
    }
  };

  const handleCloseSnackbar = (event, reason) => {
    if (reason === 'clickaway') return;
    setSnackbar({ ...snackbar, open: false });
  };

  if (loading) {
    return (
      <Box
        mt={5}
        className={styles.container}
        display="flex"
        justifyContent="center"
      >
        <CircularProgress />
      </Box>
    );
  }
  if (error) {
    return (
      <Container className={styles.container}>
        <Box mt={5}>
          <Alert severity="error">{error}</Alert>
          <Box mt={2}>
            <Button
              variant="contained"
              onClick={handleBack}
              className={styles.backButton}
            >
              Back to Reports
            </Button>
          </Box>
        </Box>
      </Container>
    );
  }

  const renderStatusBadge = (status) => {
    if (status === 'hoax') {
      return (
        <Box className={`${styles.statusBadge} ${styles.hoax}`}>
          <CancelIcon className={styles.iconStatus} fontSize="large" />
          Hoax
        </Box>
      );
    } else if (status === 'valid') {
      return (
        <Box className={`${styles.statusBadge} ${styles.valid}`}>
          <VerifiedUserIcon className={styles.iconStatus} fontSize="large" />
          Valid
        </Box>
      );
    } else {
      return (
        <Box className={`${styles.statusBadge} ${styles.doubtful}`}>
          <HelpOutlineIcon className={styles.iconStatus} fontSize="large" />
          Diragukan
        </Box>
      );
    }
  };

  return (
    <Container className={styles.container}>
      <Box className={styles.card}>
        <Box className={styles.downloadContainer}>
          <Button
            variant="outlined"
            onClick={handleDownloadPDF}
            className={styles.downloadButton}
          >
            <PictureAsPdfIcon className={styles.pdfIcon} fontSize="small" />
            Download PDF
          </Button>
        </Box>

        {renderStatusBadge(report.validationStatus)}

        <Box className={styles.pdfContent} ref={contentRef}>
          <Box className={styles.timestampBox}>
            <AccessTimeIcon className={styles.icon} fontSize="small" />
            <Typography variant="body2" className={styles.timestamp}>
              Dibuat pada: {formatDateWIB(report.createdAt)}
            </Typography>
            {isEdited && (
              <Box className={styles.updatedBox}>
                <UpdateIcon className={styles.icon} fontSize="small" />
                <Typography variant="body2" className={styles.timestamp}>
                  Diubah pada: {formatDateWIB(report.updatedAt)}
                </Typography>
                {report.editedBy && (
                  <Typography variant="body2" className={styles.editedBy}>
                    Laporan ini diedit oleh {report.editedBy}
                  </Typography>
                )}
              </Box>
            )}
          </Box>

          <Typography variant="h3" className={styles.title} mt={2}>
            {report.title}
          </Typography>

          <Box mt={3}>
            <Typography variant="h6" className={styles.sectionHeader}>
              Isi Laporan:
            </Typography>
            <Paper className={styles.paperContent}>
              <Typography variant="body1" className={styles.contentText}>
                Detail Laporan dari {report.user.username}: {report.content}
              </Typography>
              {report.document && (
                <Box mt={2}>
                  <Typography variant="subtitle2">Dokumen/Lampiran:</Typography>
                  <a
                    href={report.document}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    {report.document}
                  </a>
                </Box>
              )}
            </Paper>
          </Box>

          <Box mt={3}>
            <Typography variant="h6" className={styles.sectionHeader}>
              Detail Laporan:
            </Typography>
            <Paper className={styles.paperContent}>
              <Box display="flex" alignItems="center">
                <InfoIcon className={styles.iconInfo} fontSize="small" />
                <Typography variant="body1" className={styles.contentText}>
                  {validationText}
                </Typography>
              </Box>
            </Paper>
          </Box>

          <Box mt={3}>
            <Typography variant="body2" className={styles.userInfo}>
              Laporan ini dibuat oleh {report.user.username}.
            </Typography>
          </Box>

          <Box mt={3}>
            <Typography variant="h6" className={styles.sectionHeader}>
              Berita Terkait:
            </Typography>
            {report.relatedNews && report.relatedNews.length > 0 ? (
              report.relatedNews.map((news, index) => (
                <Box key={index} className={styles.relatedNewsItem}>
                  <Typography
                    variant="body2"
                    className={styles.relatedNewsLink}
                  >
                    <a
                      href={news.url}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      {news.title}
                    </a>
                  </Typography>
                  <Typography variant="body1" className={styles.contentText}>
                    {news.description}
                  </Typography>
                  <Typography variant="caption" className={styles.timestamp}>
                    Source: {news.source} - Published: {news.publishedAt}
                  </Typography>
                </Box>
              ))
            ) : (
              <Typography variant="body2">
                No related news available.
              </Typography>
            )}
          </Box>
        </Box>
      </Box>

      <Box className={styles.buttonContainer}>
        <Button
          variant="contained"
          onClick={handleBack}
          className={styles.backButton}
        >
          Back to Reports
        </Button>
      </Box>

      <Snackbar
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        open={snackbar.open}
        autoHideDuration={5000}
        onClose={handleCloseSnackbar}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default ReportDetail;



// File: ./src/pages/ReportDetail/ReportDetail.module.css
.container {
  margin-top: 2rem;
  margin-bottom: 2rem;
  padding: 2rem;
  background-color: #f5f7fa;
}

.card {
  position: relative;
  background-color: #ffffff;
  border-radius: 10px;
  padding: 2rem;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);
}

.downloadContainer {
  position: absolute;
  top: 1rem;
  right: 1rem;
}

.downloadButton {
  background-color: #43a047;
  color: #fff;
  font-weight: 600;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  transition: background-color 0.3s ease;
}

.downloadButton:hover {
  background-color: #388e3c;
}

.pdfContent {
  margin-top: 3rem;
}

.timestampBox {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  justify-content: center;
  margin-bottom: 0.5rem;
}

.updatedBox {
  display: flex;
  align-items: center;
  margin-left: 1rem;
}

.icon {
  margin-right: 0.3rem;
  color: #6c757d;
}

.timestamp {
  font-size: 0.85rem;
  color: #6c757d;
  font-style: italic;
  margin-right: 0.5rem;
}

.title {
  text-align: center;
  font-weight: 700;
  color: #2c3e50;
  margin-bottom: 1rem;
  font-family: 'Roboto', sans-serif;
}

.sectionHeader {
  font-size: 1.2rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  padding-bottom: 0.3rem;
  border-bottom: 2px solid #e0e0e0;
  color: #34495e;
  text-align: left;
}

.paperContent {
  padding: 1.5rem;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  margin-bottom: 1rem;
}

.contentText {
  font-family: 'Roboto', sans-serif;
  color: #424242;
  line-height: 1.6;
  text-align: justify;
}

.statusBadge {
  position: absolute;
  top: 1rem;
  left: 1rem;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-weight: 700;
  font-size: 1.5rem;
  display: inline-flex;
  align-items: center;
}

/* Badge untuk status valid */
.valid {
  background-color: #c8e6c9;
  color: #388e3c;
}

/* Badge untuk status hoax */
.hoax {
  background-color: #ffcdd2;
  color: #d32f2f;
}

/* Badge untuk status diragukan */
.doubtful {
  background-color: #fff9c4;
  color: #fbc02d;
}

.iconStatus {
  margin-right: 0.3rem;
  font-size: 1.5rem;
}

.editedBy {
  font-size: 0.85rem;
  color: #616161;
  margin-left: 1rem;
  font-style: italic;
}

.userInfo {
  font-size: 1rem;
  color: #616161;
  margin-top: 1rem;
}

.relatedNewsItem {
  padding: 1rem;
  background-color: #ffffff;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  margin-bottom: 1.5rem;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.relatedNewsItem:hover {
  transform: translateY(-3px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.relatedNewsLink a {
  text-decoration: none;
  color: #1e88e5;
  font-weight: 500;
}

.relatedNewsLink a:hover {
  text-decoration: underline;
}

.buttonContainer {
  margin-top: 2rem;
  text-align: center;
}

.backButton {
  background-color: #1e88e5;
  color: #fff;
  font-weight: 600;
  padding: 0.75rem 2rem;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.backButton:hover {
  background-color: #1565c0;
}



// File: ./src/pages/Reports/Reports.jsx
// src/pages/Reports/Reports.jsx

import React, { useEffect, useState } from 'react';

import CloseIcon from '@mui/icons-material/Close';
import {
  Box,
  TextField,
  Typography,
  CircularProgress,
  Alert,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Snackbar,
  IconButton,
} from '@mui/material';
import ReactPaginate from 'react-paginate';
import { Link as RouterLink } from 'react-router-dom';

import styles from './Reports.module.css';
import ReportsTableAdmin from './ReportsTableAdmin';
import ReportsTableUser from './ReportsTableUser';
import api from '../../services/api';

const Reports = () => {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [reportToDelete, setReportToDelete] = useState(null);
  const [confirmationText, setConfirmationText] = useState('');
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');

  const storedUser = JSON.parse(localStorage.getItem('user'));
  const userRole = storedUser?.role || '';
  const userId = storedUser?.id || '';

  const [searchQuery, setSearchQuery] = useState('');
  const [filterSender, setFilterSender] = useState('all');
  const [filterValidation, setFilterValidation] = useState('all');

  const [currentPage, setCurrentPage] = useState(0);
  const itemsPerPage = 5;

  const [statusDialogOpen, setStatusDialogOpen] = useState(false);
  const [selectedReport, setSelectedReport] = useState(null);

  useEffect(() => {
    const fetchReports = async () => {
      try {
        const response = await api.get('/reports');
        setReports(response.data);
      } catch {
        setError('Failed to fetch reports');
      } finally {
        setLoading(false);
      }
    };
    fetchReports();
  }, []);

  const filteredReports = reports.filter((report) => {
    const matchesSearch = report.title
      .toLowerCase()
      .includes(searchQuery.toLowerCase());
    const matchesSender =
      filterSender === 'all' || report.user.role.toLowerCase() === filterSender;
    const matchesValidation =
      filterValidation === 'all' ||
      report.validationStatus.toLowerCase() === filterValidation;
    return matchesSearch && matchesSender && matchesValidation;
  });

  const displayedReports = filteredReports.slice(
    currentPage * itemsPerPage,
    (currentPage + 1) * itemsPerPage
  );
  const pageCount = Math.ceil(filteredReports.length / itemsPerPage);

  const getReportTimestamp = (report) =>
    report.updatedAt && report.updatedAt !== report.createdAt
      ? report.updatedAt
      : report.createdAt;

  const formatDateWIB = (dateStr) => {
    const options = {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    };
    return new Date(dateStr).toLocaleString('id-ID', options) + ' WIB';
  };

  const openStatusDialog = (report) => {
    setSelectedReport(report);
    setStatusDialogOpen(true);
  };
  const closeStatusDialog = () => {
    setStatusDialogOpen(false);
    setSelectedReport(null);
  };
  const handleStatusUpdate = async () => {
    try {
      await api.put(`/reports/${selectedReport.id}/status`, {
        status: 'selesai',
      });
      setReports((prev) => prev.filter((r) => r.id !== selectedReport.id));
      closeStatusDialog();
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to update status');
      closeStatusDialog();
    }
  };

  const openDeleteDialog = (report) => {
    setReportToDelete(report);
    setDeleteDialogOpen(true);
  };
  const closeDeleteDialog = () => {
    setDeleteDialogOpen(false);
    setReportToDelete(null);
    setConfirmationText('');
  };
  const handleDeleteConfirmation = async () => {
    if (confirmationText === `hapus ${reportToDelete.title}`) {
      try {
        await api.delete(`/reports/${reportToDelete.id}`);
        setReports((prev) => prev.filter((r) => r.id !== reportToDelete.id));
        setSnackbarMessage('Laporan berhasil dihapus!');
        setSnackbarOpen(true);
        closeDeleteDialog();
      } catch {
        setSnackbarMessage('Gagal menghapus laporan!');
        setSnackbarOpen(true);
      }
    }
  };

  const handleSearch = (e) => {
    setSearchQuery(e.target.value);
    setCurrentPage(0);
  };
  const handleFilterSenderChange = (e) => {
    setFilterSender(e.target.value);
    setCurrentPage(0);
  };
  const handleFilterValidationChange = (e) => {
    setFilterValidation(e.target.value);
    setCurrentPage(0);
  };
  const handleSnackbarClose = () => setSnackbarOpen(false);

  if (loading) {
    return (
      <Box
        className={styles.container}
        display="flex"
        justifyContent="center"
        mt={3}
      >
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box className={styles.container} m={3}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <Box className={styles.container}>
      <Box className={styles.header}>
        <Typography variant="h4">Reports</Typography>
        <Button variant="contained" component={RouterLink} to="/create-report">
          Create Report
        </Button>
      </Box>

      <TextField
        fullWidth
        placeholder="Search by Title"
        value={searchQuery}
        onChange={handleSearch}
        margin="normal"
      />

      <Box className={styles.filterContainer}>
        <FormControl
          variant="outlined"
          size="small"
          className={styles.filterControl}
        >
          <InputLabel id="filter-sender-label">Pengirim</InputLabel>
          <Select
            labelId="filter-sender-label"
            value={filterSender}
            onChange={handleFilterSenderChange}
            label="Pengirim"
          >
            <MenuItem value="all">Semua</MenuItem>
            <MenuItem value="owner">Owner</MenuItem>
            <MenuItem value="admin">Admin</MenuItem>
            <MenuItem value="user">User</MenuItem>
          </Select>
        </FormControl>

        <FormControl
          variant="outlined"
          size="small"
          className={styles.filterControl}
        >
          <InputLabel id="filter-validation-label">Validasi</InputLabel>
          <Select
            labelId="filter-validation-label"
            value={filterValidation}
            onChange={handleFilterValidationChange}
            label="Validasi"
          >
            <MenuItem value="all">Semua</MenuItem>
            <MenuItem value="valid">Valid</MenuItem>
            <MenuItem value="hoax">Hoax</MenuItem>
            <MenuItem value="diragukan">Diragukan</MenuItem>
          </Select>
        </FormControl>
      </Box>

      {userRole === 'user' ? (
        <ReportsTableUser
          reports={displayedReports}
          currentPage={currentPage}
          itemsPerPage={itemsPerPage}
          formatDateWIB={formatDateWIB}
          getReportTimestamp={getReportTimestamp}
        />
      ) : (
        <ReportsTableAdmin
          reports={displayedReports}
          currentPage={currentPage}
          itemsPerPage={itemsPerPage}
          formatDateWIB={formatDateWIB}
          getReportTimestamp={getReportTimestamp}
          userRole={userRole}
          userId={userId}
          openStatusDialog={openStatusDialog}
          openDeleteDialog={openDeleteDialog}
        />
      )}

      <Box
        className={styles.paginationContainer}
        display="flex"
        justifyContent="center"
        mt={3}
      >
        <ReactPaginate
          previousLabel={'Previous'}
          nextLabel={'Next'}
          breakLabel={'...'}
          pageCount={pageCount}
          onPageChange={({ selected }) => setCurrentPage(selected)}
          containerClassName={styles.pagination}
          activeClassName={styles.active}
          pageClassName={styles.pageItem}
          pageLinkClassName={styles.pageLink}
          previousClassName={styles.pageItem}
          previousLinkClassName={styles.pageLink}
          nextClassName={styles.pageItem}
          nextLinkClassName={styles.pageLink}
        />
      </Box>

      <Dialog open={deleteDialogOpen} onClose={closeDeleteDialog}>
        <DialogTitle>Konfirmasi Hapus Laporan</DialogTitle>
        <DialogContent>
          <Typography>
            Ketik <strong>hapus {reportToDelete?.title}</strong> untuk menghapus
            laporan ini.
          </Typography>
          <TextField
            label="Teks Konfirmasi"
            fullWidth
            value={confirmationText}
            onChange={(e) => setConfirmationText(e.target.value)}
            margin="normal"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={closeDeleteDialog}>Batal</Button>
          <Button
            onClick={handleDeleteConfirmation}
            variant="contained"
            color="error"
            disabled={confirmationText !== `hapus ${reportToDelete?.title}`}
          >
            Hapus
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={4000}
        onClose={handleSnackbarClose}
        message={snackbarMessage}
        action={
          <IconButton
            size="small"
            aria-label="close"
            color="inherit"
            onClick={handleSnackbarClose}
          >
            <CloseIcon fontSize="small" />
          </IconButton>
        }
      />

      <Dialog open={statusDialogOpen} onClose={closeStatusDialog}>
        <DialogTitle>Update Report Status</DialogTitle>
        <DialogContent>
          <Typography>
            Apakah Anda yakin ingin mengubah status laporan ini menjadi{' '}
            <strong>selesai</strong>?
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={closeStatusDialog}>Batal</Button>
          <Button
            onClick={handleStatusUpdate}
            variant="contained"
            color="primary"
          >
            Konfirmasi
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Reports;



// File: ./src/pages/Reports/Reports.module.css
/* Global container styles */
.container {
  padding: 20px;
  margin: 0 auto;
  max-width: 1200px;
  font-family: 'Roboto', sans-serif;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

/* Filter controls for sender and validation */
.filterContainer {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
}

.filterControl {
  min-width: 150px;
}

/* Table styles */
.tableContainer {
  margin-top: 1rem;
  border-radius: 6px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.table {
  width: 100%;
  border-collapse: collapse;
}

.cell {
  border: 1px solid #e0e0e0;
  padding: 12px;
  text-align: left;
}

.centerText {
  text-align: center;
}

.tableHeader {
  background-color: #88c273;
}

.tableHeader .cell {
  font-weight: bold;
  color: #ffffff;
  text-align: center;
}

/* Status validation styles */
.hoaxStatus {
  color: #c62828;
  font-weight: bold;
}

.validStatus {
  color: #2e7d32;
  font-weight: bold;
}

.durigStatus {
  color: #ff9800;
  font-weight: bold;
}

/* Style for action buttons */
.actionButton {
  margin-left: 0.5rem;
}

.statusButton {
  margin-left: 0.5rem;
  font-size: 0.75rem;
  border-color: #43a047;
  color: #43a047;
  padding: 4px 8px;
}

/* Pagination styles */
.paginationContainer {
  margin-top: 1rem;
}

.pagination {
  display: flex;
  justify-content: center;
  list-style: none;
  padding: 0;
  margin: 0;
}

.pageItem {
  margin: 0 0.3rem;
}

.pageLink {
  padding: 0.5rem 0.75rem;
  border: 1px solid #c8e6c9;
  color: #388e3c;
  cursor: pointer;
  text-decoration: none;
  border-radius: 4px;
  transition: background-color 0.3s;
}

.pageLink:hover {
  background-color: #a5d6a7;
}

.active .pageLink {
  background-color: #43a047;
  border-color: #43a047;
  color: #ffffff;
}



// File: ./src/pages/Reports/ReportsTableAdmin.jsx
import React from 'react';

import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import VisibilityIcon from '@mui/icons-material/Visibility';
import {
  Tooltip,
  IconButton,
  Button,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Paper,
} from '@mui/material';
import { Link as RouterLink } from 'react-router-dom';

import styles from './ReportsTableAdmin.module.css';

const ReportsTableAdmin = ({
  reports,
  currentPage,
  itemsPerPage,
  formatDateWIB,
  getReportTimestamp,
  // eslint-disable-next-line no-unused-vars
  userRole,
  // eslint-disable-next-line no-unused-vars
  userId,
  openStatusDialog,
  openDeleteDialog,
}) => (
  <TableContainer component={Paper} className={styles.tableContainer}>
    <Table className={styles.table}>
      <TableHead className={styles.tableHeader}>
        <TableRow>
          <TableCell className={`${styles.cell} ${styles.centerText}`}>
            No
          </TableCell>
          <TableCell className={styles.cell}>Title</TableCell>
          <TableCell className={styles.cell}>Pengirim</TableCell>
          <TableCell className={styles.cell}>Waktu (WIB)</TableCell>
          <TableCell className={styles.cell}>Validasi</TableCell>
          <TableCell className={styles.cell}>Status Laporan</TableCell>
          <TableCell className={`${styles.cell} ${styles.centerText}`}>
            Actions
          </TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {reports.map((report, idx) => {
          const ts = getReportTimestamp(report);
          return (
            <TableRow key={report.id}>
              <TableCell className={`${styles.cell} ${styles.centerText}`}>
                {currentPage * itemsPerPage + idx + 1}
              </TableCell>
              <TableCell className={styles.cell}>
                <RouterLink
                  to={`/reports/${report.id}`}
                  className={styles.link}
                >
                  {report.title}
                </RouterLink>
              </TableCell>
              <TableCell className={styles.cell}>
                {report.user.username}
              </TableCell>
              <TableCell className={styles.cell}>{formatDateWIB(ts)}</TableCell>
              <TableCell className={styles.cell}>
                <span
                  className={
                    report.validationStatus === 'hoax'
                      ? styles.hoaxStatus
                      : report.validationStatus === 'valid'
                        ? styles.validStatus
                        : styles.durigStatus
                  }
                >
                  {report.validationStatus.charAt(0).toUpperCase() +
                    report.validationStatus.slice(1)}
                </span>
              </TableCell>
              <TableCell className={styles.cell}>
                {report.status || 'diproses'}
              </TableCell>
              <TableCell className={`${styles.cell} ${styles.centerText}`}>
                <Tooltip title="View" arrow>
                  <IconButton
                    component={RouterLink}
                    to={`/reports/${report.id}`}
                    size="small"
                  >
                    <VisibilityIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Edit" arrow>
                  <IconButton
                    component={RouterLink}
                    to={`/reports/edit/${report.id}`}
                    size="small"
                    className={styles.actionButton}
                  >
                    <EditIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Delete" arrow>
                  <IconButton
                    size="small"
                    onClick={() => openDeleteDialog(report)}
                    className={styles.actionButton}
                    color="error"
                  >
                    <DeleteIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Mark as Selesai" arrow>
                  <Button
                    size="small"
                    variant="outlined"
                    className={styles.statusButton}
                    onClick={() => openStatusDialog(report)}
                  >
                    Selesai
                  </Button>
                </Tooltip>
              </TableCell>
            </TableRow>
          );
        })}
        {reports.length === 0 && (
          <TableRow>
            <TableCell
              colSpan={7}
              className={`${styles.cell} ${styles.centerText}`}
            >
              No reports found.
            </TableCell>
          </TableRow>
        )}
      </TableBody>
    </Table>
  </TableContainer>
);

export default ReportsTableAdmin;



// File: ./src/pages/Reports/ReportsTableAdmin.module.css
.tableContainer {
  margin-top: 1rem;
  border-radius: 6px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.table {
  width: 100%;
  border-collapse: collapse;
}

.cell {
  border: 1px solid #e0e0e0;
  padding: 12px;
  text-align: left;
}

.centerText {
  text-align: center;
}

.tableHeader {
  background-color: #88c273;
}

.tableHeader .cell {
  font-weight: bold;
  color: #ffffff;
  text-align: center;
}

.hoaxStatus {
  color: #c62828;
  font-weight: bold;
}

.validStatus {
  color: #2e7d32;
  font-weight: bold;
}

.durigStatus {
  color: #ff9800;
  font-weight: bold;
}

.actionButton {
  margin-left: 0.5rem;
}

.statusButton {
  margin-left: 0.5rem;
  font-size: 0.75rem;
  border-color: #43a047;
  color: #43a047;
  padding: 4px 8px;
}

.link {
  color: inherit;
  text-decoration: none;
}

.link:hover {
  text-decoration: underline;
}



// File: ./src/pages/Reports/ReportsTableUser.jsx
import React from 'react';

import VisibilityIcon from '@mui/icons-material/Visibility';
import {
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Paper,
  Button,
  Box,
} from '@mui/material';
import { Link as RouterLink } from 'react-router-dom';

import styles from './ReportsTableUser.module.css';

const ReportsTableUser = ({
  reports,
  currentPage,
  itemsPerPage,
  formatDateWIB,
  getReportTimestamp,
}) => (
  <TableContainer component={Paper} className={styles.tableContainer}>
    <Table className={styles.table}>
      <TableHead className={styles.tableHeader}>
        <TableRow>
          <TableCell className={`${styles.cell} ${styles.centerText}`}>
            No
          </TableCell>
          <TableCell className={styles.cell}>Title</TableCell>
          <TableCell className={styles.cell}>Waktu (WIB)</TableCell>
          <TableCell className={styles.cell}>Validasi</TableCell>
          <TableCell className={styles.cell}>Status Laporan</TableCell>
          <TableCell className={`${styles.cell} ${styles.centerText}`}>
            Actions
          </TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {reports.map((report, idx) => {
          const ts = getReportTimestamp(report);
          return (
            <TableRow key={report.id}>
              <TableCell className={`${styles.cell} ${styles.centerText}`}>
                {currentPage * itemsPerPage + idx + 1}
              </TableCell>
              <TableCell className={styles.cell}>
                <RouterLink
                  to={`/reports/${report.id}`}
                  className={styles.link}
                >
                  {report.title}
                </RouterLink>
              </TableCell>
              <TableCell className={styles.cell}>{formatDateWIB(ts)}</TableCell>
              <TableCell className={styles.cell}>
                <span
                  className={
                    report.validationStatus === 'hoax'
                      ? styles.hoaxStatus
                      : report.validationStatus === 'valid'
                        ? styles.validStatus
                        : styles.durigStatus
                  }
                >
                  {report.validationStatus.charAt(0).toUpperCase() +
                    report.validationStatus.slice(1)}
                </span>
              </TableCell>
              <TableCell className={styles.cell}>
                {report.status || 'diproses'}
              </TableCell>
              <TableCell className={`${styles.cell} ${styles.actionsCell}`}>
                <Box className={styles.actionsGroup}>
                  <Button
                    size="small"
                    startIcon={<VisibilityIcon />}
                    component={RouterLink}
                    to={`/reports/${report.id}`}
                    className={styles.viewButton}
                  >
                    Lihat Laporan
                  </Button>
                </Box>
              </TableCell>
            </TableRow>
          );
        })}
        {reports.length === 0 && (
          <TableRow>
            <TableCell
              colSpan={6}
              className={`${styles.cell} ${styles.centerText}`}
            >
              No reports found.
            </TableCell>
          </TableRow>
        )}
      </TableBody>
    </Table>
  </TableContainer>
);

export default ReportsTableUser;

//test



// File: ./src/pages/Reports/ReportsTableUser.module.css
.tableContainer {
  margin-top: 1rem;
  border-radius: 6px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.table {
  width: 100%;
  border-collapse: collapse;
}

.cell {
  border: 1px solid #e0e0e0;
  padding: 12px;
  text-align: left;
}

.centerText {
  text-align: center;
}

.tableHeader {
  background-color: #88c273;
}

.tableHeader .cell {
  font-weight: bold;
  color: #ffffff;
  text-align: center;
}

.hoaxStatus {
  color: #c62828;
  font-weight: bold;
}

.validStatus {
  color: #2e7d32;
  font-weight: bold;
}

.durigStatus {
  color: #ff9800;
  font-weight: bold;
}

.link {
  color: inherit;
  text-decoration: none;
}

.link:hover {
  text-decoration: underline;
}

/* Actions */
.actionsCell {
  padding: 8px;
}

.actionsGroup {
  display: flex;
  justify-content: center;
  width: 100%;
}

.viewButton {
  text-transform: none;
  color: #1565c0;
  background-color: transparent;
}

.viewButton:hover {
  background-color: rgba(21, 101, 192, 0.1);
}



// File: ./src/pages/Unauthorized/Unauthorized.jsx
import React from 'react';

import { Container, Typography } from '@mui/material';

const Unauthorized = () => {
  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        403 - Unauthorized
      </Typography>
      <Typography variant="body1">
        Anda tidak memiliki izin untuk mengakses halaman ini.
      </Typography>
    </Container>
  );
};

export default Unauthorized;



// File: ./src/pages/UserManagement/CreateUser.jsx
import React, { useState } from 'react';

import {
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
} from '@mui/icons-material';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  IconButton,
  InputAdornment,
  Typography,
} from '@mui/material';

import styles from './CreateUser.module.css';
import api from '../../services/api';

const CreateUser = ({ open, onClose }) => {
  const [form, setForm] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
    fullName: '',
    role: 'user',
  });
  const [error, setError] = useState('');
  const [submitting, setSubmitting] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [errorDialogOpen, setErrorDialogOpen] = useState(false);

  // Handle input value changes
  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // Toggle visibility for password field
  const handleTogglePasswordVisibility = () => {
    setShowPassword((prev) => !prev);
  };

  // Toggle visibility for confirm password field
  const handleToggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword((prev) => !prev);
  };

  // Submit form to create new user with validasi input
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    // Validasi required fields
    if (!form.username.trim()) {
      setError('Username is required');
      setErrorDialogOpen(true);
      return;
    }
    if (!form.email.trim()) {
      setError('Email is required');
      setErrorDialogOpen(true);
      return;
    }
    if (!form.fullName.trim()) {
      setError('Full Name is required');
      setErrorDialogOpen(true);
      return;
    }
    if (!form.password || !form.confirmPassword) {
      setError('Password fields are required');
      setErrorDialogOpen(true);
      return;
    }
    if (form.password.length < 6) {
      setError('Password must be at least 6 characters');
      setErrorDialogOpen(true);
      return;
    }
    if (form.password !== form.confirmPassword) {
      setError('Passwords do not match');
      setErrorDialogOpen(true);
      return;
    }

    setSubmitting(true);
    try {
      await api.post('/auth/register', {
        username: form.username.trim(),
        email: form.email.trim(),
        password: form.password,
        role: form.role,
        fullName: form.fullName.trim(),
      });
      onClose();
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to create user');
      setErrorDialogOpen(true);
    } finally {
      setSubmitting(false);
    }
  };

  // Close error dialog
  const handleCloseErrorDialog = () => {
    setErrorDialogOpen(false);
    setError('');
  };

  return (
    <>
      <Dialog
        open={open}
        onClose={onClose}
        maxWidth="sm"
        fullWidth
        classes={{ paper: styles.dialogPaper }}
      >
        <DialogTitle className={styles.dialogTitle}>
          Create New User
        </DialogTitle>
        <DialogContent dividers>
          <form onSubmit={handleSubmit} className={styles.form}>
            <TextField
              label="Username *"
              name="username"
              value={form.username}
              onChange={handleChange}
              required
              fullWidth
              margin="normal"
            />
            <TextField
              label="Email *"
              name="email"
              type="email"
              value={form.email}
              onChange={handleChange}
              required
              fullWidth
              margin="normal"
            />
            {/* Password Field */}
            <TextField
              label="Password *"
              name="password"
              type={showPassword ? 'text' : 'password'}
              value={form.password}
              onChange={handleChange}
              required
              fullWidth
              margin="normal"
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={handleTogglePasswordVisibility}
                      edge="end"
                      aria-label="toggle password visibility"
                    >
                      {showPassword ? (
                        <VisibilityOffIcon />
                      ) : (
                        <VisibilityIcon />
                      )}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
            {/* Confirm Password Field */}
            <TextField
              label="Confirm Password *"
              name="confirmPassword"
              type={showConfirmPassword ? 'text' : 'password'}
              value={form.confirmPassword}
              onChange={handleChange}
              required
              fullWidth
              margin="normal"
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={handleToggleConfirmPasswordVisibility}
                      edge="end"
                      aria-label="toggle confirm password visibility"
                    >
                      {showConfirmPassword ? (
                        <VisibilityOffIcon />
                      ) : (
                        <VisibilityIcon />
                      )}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
            <TextField
              label="Full Name *"
              name="fullName"
              value={form.fullName}
              onChange={handleChange}
              required
              fullWidth
              margin="normal"
            />
            <TextField
              label="Role"
              name="role"
              value={form.role}
              onChange={handleChange}
              required
              fullWidth
              margin="normal"
              select
              SelectProps={{ native: true }}
            >
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </TextField>
          </form>
        </DialogContent>
        <DialogActions>
          <Button
            onClick={onClose}
            variant="text"
            color="secondary"
            className={styles.cancelButton}
          >
            Cancel
          </Button>
          <Button
            onClick={handleSubmit}
            variant="contained"
            color="primary"
            disabled={submitting}
            className={styles.submitButton}
          >
            {submitting ? 'Creating...' : 'Create User'}
          </Button>
        </DialogActions>
      </Dialog>

      {errorDialogOpen && (
        <Dialog
          open={errorDialogOpen}
          onClose={handleCloseErrorDialog}
          maxWidth="sm"
          fullWidth
          classes={{ paper: styles.errorDialogPaper }}
        >
          <DialogTitle className={styles.errorDialogTitle}>Error</DialogTitle>
          <DialogContent dividers>
            <Typography className={styles.errorDialogContent}>
              {error}
            </Typography>
          </DialogContent>
          <DialogActions>
            <Button
              onClick={handleCloseErrorDialog}
              color="primary"
              variant="contained"
              className={styles.errorDialogButton}
            >
              OK
            </Button>
          </DialogActions>
        </Dialog>
      )}
    </>
  );
};

export default CreateUser;



// File: ./src/pages/UserManagement/CreateUser.module.css
.dialogPaper {
  padding: 24px;
  border-radius: 12px;
}

.dialogTitle {
  font-size: 1.5rem;
  font-weight: bold;
  text-align: center;
  margin-bottom: 0.5rem;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-top: 1rem;
}

.cancelButton {
  text-transform: none;
  font-weight: 500;
}

.submitButton {
  text-transform: none;
  font-weight: 600;
}

/* Styling untuk error dialog */
.errorDialogPaper {
  padding: 24px;
  border-radius: 12px;
  background-color: #ffebee;
}

.errorDialogTitle {
  font-size: 1.5rem;
  font-weight: bold;
  text-align: center;
  color: #d32f2f;
}

.errorDialogContent {
  font-size: 1rem;
  text-align: center;
  color: #d32f2f;
  margin: 16px 0;
}

.errorDialogButton {
  text-transform: none;
  font-weight: 600;
}



// File: ./src/pages/UserManagement/DeleteUserDialog.jsx
import React, { useState, useEffect } from 'react';

import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Typography,
} from '@mui/material';

import styles from './DeleteUserDialog.module.css';

const DeleteUserDialog = ({ open, user, onClose, onConfirm }) => {
  const [confirmationText, setConfirmationText] = useState('');
  const expectedText = `Hapus "${user.username}"`;

  // Reset input tiap kali dialog terbuka
  useEffect(() => {
    if (open) {
      setConfirmationText('');
    }
  }, [open]);

  return (
    <Dialog open={open} onClose={onClose} maxWidth="xs" fullWidth>
      <DialogTitle className={styles.dialogTitle}>
        Konfirmasi Hapus Akun
      </DialogTitle>
      <DialogContent>
        <Typography className={styles.instruction}>
          Untuk menghapus akun <strong>{user.username}</strong> dengan role{' '}
          <strong>{user.role}</strong>, ketikkan persis:
        </Typography>
        <Typography variant="body2" className={styles.expectedText}>
          {expectedText}
        </Typography>
        <TextField
          fullWidth
          variant="outlined"
          margin="normal"
          value={confirmationText}
          onChange={(e) => setConfirmationText(e.target.value)}
        />
      </DialogContent>
      <DialogActions className={styles.dialogActions}>
        <Button
          onClick={onClose}
          variant="text"
          color="secondary"
          className={styles.cancelButton}
        >
          Batal
        </Button>
        <Button
          onClick={onConfirm}
          variant="contained"
          color="error"
          disabled={confirmationText !== expectedText}
          className={styles.deleteButton}
        >
          Hapus Akun
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default DeleteUserDialog;



// File: ./src/pages/UserManagement/DeleteUserDialog.module.css
.dialogTitle {
  font-size: 1.5rem;
  font-weight: bold;
  text-align: center;
  padding: 16px;
}

.instruction {
  margin-bottom: 0.5rem;
}

.expectedText {
  font-style: italic;
  margin-bottom: 1rem;
  color: #555;
}

.dialogActions {
  justify-content: center;
  padding: 8px 16px;
}

.cancelButton {
  text-transform: none;
}

.deleteButton {
  text-transform: none;
}



// File: ./src/pages/UserManagement/EditUserRole.jsx
import React, { useState } from 'react';

import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Alert,
} from '@mui/material';

import styles from './EditUserRole.module.css';
import api from '../../services/api';

const EditUserRole = ({ open, user, onClose }) => {
  const [role, setRole] = useState(user.role);
  const [error, setError] = useState('');
  const [submitting, setSubmitting] = useState(false);

  const handleRoleChange = (e) => {
    setRole(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSubmitting(true);
    try {
      // Pastikan endpoint sesuai dengan API backend Anda, misalnya: /users/:userId/role
      await api.put(`/users/${user.id}/role`, { role });
      onClose();
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to update role');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="sm"
      fullWidth
      classes={{ paper: styles.dialogPaper }}
    >
      <DialogTitle className={styles.dialogTitle}>
        Edit Role for {user.username}
      </DialogTitle>
      <DialogContent dividers>
        {error && (
          <Alert severity="error" className={styles.error}>
            {error}
          </Alert>
        )}
        <form onSubmit={handleSubmit} className={styles.form}>
          <TextField
            label="Role"
            name="role"
            value={role}
            onChange={handleRoleChange}
            required
            fullWidth
            margin="normal"
            select
            SelectProps={{ native: true }}
          >
            <option value="user">User</option>
            <option value="admin">Admin</option>
          </TextField>
        </form>
      </DialogContent>
      <DialogActions>
        <Button
          onClick={onClose}
          variant="text"
          color="secondary"
          className={styles.cancelButton}
        >
          Cancel
        </Button>
        <Button
          onClick={handleSubmit}
          variant="contained"
          color="primary"
          disabled={submitting}
          className={styles.submitButton}
        >
          {submitting ? 'Updating...' : 'Update Role'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default EditUserRole;



// File: ./src/pages/UserManagement/EditUserRole.module.css
.dialogPaper {
  padding: 16px;
  border-radius: 12px;
}

.dialogTitle {
  font-size: 1.5rem;
  font-weight: bold;
  text-align: center;
}

.error {
  margin-bottom: 1rem;
}

.form {
  display: flex;
  flex-direction: column;
}

.cancelButton {
  text-transform: none;
}

.submitButton {
  text-transform: none;
}



// File: ./src/pages/UserManagement/UserManagement.jsx
import React, { useEffect, useState, useContext, useMemo } from 'react';

import { ArrowDropDown } from '@mui/icons-material';
import {
  Box,
  TextField,
  Button,
  CircularProgress,
  Alert,
  Menu,
  MenuItem,
  Pagination,
  Typography,
} from '@mui/material';

import CreateUser from './CreateUser';
import DeleteUserDialog from './DeleteUserDialog';
import EditUserRole from './EditUserRole';
import styles from './UserManagement.module.css';
import UsersTable from './UsersTable';
import { AuthContext } from '../../context/AuthContext';
import api from '../../services/api';

const UserManagement = () => {
  const { auth } = useContext(AuthContext);
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const [showCreate, setShowCreate] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [deletingUser, setDeletingUser] = useState(null);

  // Search & Sort
  const [searchQuery, setSearchQuery] = useState('');
  const [sortDirection, setSortDirection] = useState('asc'); // 'asc' = A–Z, 'desc' = Z–A

  // Pagination
  const [currentPage, setCurrentPage] = useState(0);
  const itemsPerPage = 10;

  // Sort menu anchor
  const [anchorEl, setAnchorEl] = useState(null);
  const openMenu = Boolean(anchorEl);
  const handleSortClick = (e) => setAnchorEl(e.currentTarget);
  const handleSortClose = () => setAnchorEl(null);
  const handleSortSelect = (dir) => {
    setSortDirection(dir);
    handleSortClose();
  };

  // Fetch users
  useEffect(() => {
    api
      .get('/users')
      .then((res) => {
        setUsers(res.data.filter((u) => u.id !== auth.user.id));
      })
      .catch(() => setError('Failed to fetch users'))
      .finally(() => setLoading(false));
  }, [auth.user.id]);

  // Filter by search
  const filtered = useMemo(
    () =>
      users.filter((u) =>
        u.username.toLowerCase().includes(searchQuery.toLowerCase())
      ),
    [users, searchQuery]
  );

  // Sort by username
  const sorted = useMemo(() => {
    return [...filtered].sort((a, b) => {
      if (a.username < b.username) return sortDirection === 'asc' ? -1 : 1;
      if (a.username > b.username) return sortDirection === 'asc' ? 1 : -1;
      return 0;
    });
  }, [filtered, sortDirection]);

  const pageCount = Math.ceil(sorted.length / itemsPerPage);
  const displayedUsers = sorted.slice(
    currentPage * itemsPerPage,
    (currentPage + 1) * itemsPerPage
  );

  if (loading) {
    return (
      <Box
        className={styles.container}
        display="flex"
        justifyContent="center"
        mt={4}
      >
        <CircularProgress />
      </Box>
    );
  }
  if (error) {
    return (
      <Box className={styles.container} mt={4}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <Box className={styles.container}>
      <Box className={styles.topBar}>
        <Typography variant="h5" className={styles.title}>
          User Management
        </Typography>
        <Button
          variant="contained"
          color="primary"
          onClick={() => setShowCreate(true)}
          className={styles.createButton}
        >
          Create New User
        </Button>
      </Box>

      <Box className={styles.controls}>
        <TextField
          placeholder="Search by username…"
          value={searchQuery}
          onChange={(e) => {
            setSearchQuery(e.target.value);
            setCurrentPage(0);
          }}
          size="small"
          className={styles.searchField}
        />

        <Button
          variant="outlined"
          endIcon={<ArrowDropDown />}
          onClick={handleSortClick}
          className={styles.sortButton}
        >
          Sort: {sortDirection === 'asc' ? 'A–Z' : 'Z–A'}
        </Button>
        <Menu anchorEl={anchorEl} open={openMenu} onClose={handleSortClose}>
          <MenuItem onClick={() => handleSortSelect('asc')}>A–Z</MenuItem>
          <MenuItem onClick={() => handleSortSelect('desc')}>Z–A</MenuItem>
        </Menu>
      </Box>

      <UsersTable
        users={displayedUsers}
        currentPage={currentPage}
        itemsPerPage={itemsPerPage}
        onEditRole={setEditingUser}
        onDelete={setDeletingUser}
      />

      <Box className={styles.pagination}>
        <Pagination
          count={pageCount}
          page={currentPage + 1}
          onChange={(_, page) => setCurrentPage(page - 1)}
          color="primary"
        />
      </Box>

      {showCreate && (
        <CreateUser
          open
          onClose={() => {
            setShowCreate(false);
            api
              .get('/users')
              .then((res) =>
                setUsers(res.data.filter((u) => u.id !== auth.user.id))
              );
          }}
        />
      )}
      {editingUser && (
        <EditUserRole
          open
          user={editingUser}
          onClose={() => {
            setEditingUser(null);
            api
              .get('/users')
              .then((res) =>
                setUsers(res.data.filter((u) => u.id !== auth.user.id))
              );
          }}
        />
      )}
      {deletingUser && (
        <DeleteUserDialog
          open
          user={deletingUser}
          onClose={() => setDeletingUser(null)}
          onConfirm={async () => {
            await api.delete(`/users/${deletingUser.id}`);
            setUsers((prev) => prev.filter((u) => u.id !== deletingUser.id));
            setDeletingUser(null);
          }}
        />
      )}
    </Box>
  );
};

export default UserManagement;



// File: ./src/pages/UserManagement/UserManagement.module.css
.container {
  max-width: 1140px;
  margin: 2rem auto;
  padding: 0 1rem;
  font-family: 'Roboto', sans-serif;
}

.topBar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.title {
  font-weight: 600;
  color: #2e7d32;
}

.createButton {
  text-transform: none;
  font-weight: 600;
  background-color: #4caf50;
}

/* Controls */
.controls {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  align-items: center;
  margin-bottom: 1rem;
}

.searchField {
  flex: 1;
  min-width: 220px;
}

.sortButton {
  text-transform: none;
  border-color: #a5d6a7;
  color: #33691e;
  background-color: #f1f8e9;
}

/* Table action cell is right-aligned in UsersTable.module.css */

/* Pagination */
.pagination {
  display: flex;
  justify-content: center;
  margin-top: 1.5rem;
}



// File: ./src/pages/UserManagement/UsersTable.jsx
import React from 'react';

import { Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';
import {
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Paper,
  Button,
  Box,
} from '@mui/material';

import styles from './UsersTable.module.css';

const UsersTable = ({
  users,
  currentPage,
  itemsPerPage,
  onEditRole,
  onDelete,
}) => (
  <TableContainer component={Paper} className={styles.tableContainer}>
    <Table>
      <TableHead className={styles.tableHeader}>
        <TableRow>
          <TableCell className={styles.centerText}>No</TableCell>
          <TableCell className={styles.cell}>Username</TableCell>
          <TableCell className={styles.cell}>Full Name</TableCell>
          <TableCell className={styles.cell}>Email</TableCell>
          <TableCell className={styles.cell}>Role</TableCell>
          <TableCell className={`${styles.cell} ${styles.centerText}`}>
            Actions
          </TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user, idx) => (
          <TableRow
            key={user.id}
            className={idx % 2 === 0 ? styles.oddRow : ''}
          >
            <TableCell className={styles.centerText}>
              {currentPage * itemsPerPage + idx + 1}
            </TableCell>
            <TableCell className={styles.cell}>{user.username}</TableCell>
            <TableCell className={styles.cell}>
              {user.fullName || '-'}
            </TableCell>
            <TableCell className={styles.cell}>{user.email}</TableCell>
            <TableCell className={styles.cell}>{user.role}</TableCell>
            <TableCell className={`${styles.cell} ${styles.actionsCell}`}>
              <Box className={styles.actionsGroup}>
                <Button
                  size="small"
                  startIcon={<EditIcon />}
                  onClick={() => onEditRole(user)}
                  className={styles.editButton}
                >
                  Edit
                </Button>
                <Button
                  size="small"
                  startIcon={<DeleteIcon />}
                  onClick={() => onDelete(user)}
                  className={styles.deleteButton}
                >
                  Delete
                </Button>
              </Box>
            </TableCell>
          </TableRow>
        ))}
        {users.length === 0 && (
          <TableRow>
            <TableCell
              colSpan={6}
              className={`${styles.cell} ${styles.centerText}`}
            >
              No users found.
            </TableCell>
          </TableRow>
        )}
      </TableBody>
    </Table>
  </TableContainer>
);

export default UsersTable;



// File: ./src/pages/UserManagement/UsersTable.module.css
/* src/pages/usermanagement/UsersTable.module.css */

/* Table container */
.tableContainer {
  margin-top: 1rem;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.tableHeader {
  background-color: #f1f8e9;
}

.cell {
  border: 1px solid #e0e0e0;
  padding: 12px;
  text-align: left;
}

.centerText {
  text-align: center;
}

.oddRow {
  background-color: #fafafa;
}

/* Actions cell styling */
.actionsCell {
  padding: 8px;
}

.actionsGroup {
  display: inline-flex;
  gap: 0.5rem;
  justify-content: center;
  width: 100%;
}

.editButton {
  color: #33691e;
  text-transform: none;
}

.editButton:hover {
  background-color: rgba(200,230,201,0.4);
}

.deleteButton {
  color: #d32f2f !important;
  text-transform: none;
}

.deleteButton:hover {
  background-color: rgba(255,205,210,0.5);
}



// File: ./src/services/api.js
import axios from 'axios';

// const API_URL =
//   process.env.REACT_APP_API_URL || 'https://his-backend.duckdns.org/api';
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';

const api = axios.create({
  baseURL: API_URL,
});

let isRefreshing = false;
let failedQueue = [];

const processQueue = (error, token = null) => {
  failedQueue.forEach((prom) => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

api.interceptors.request.use(
  (config) => {
    const accessToken = localStorage.getItem('accessToken');
    if (accessToken) {
      config.headers['Authorization'] = `Bearer ${accessToken}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    if (
      error.response &&
      error.response.status === 401 &&
      !originalRequest._retry
    ) {
      if (isRefreshing) {
        return new Promise(function (resolve, reject) {
          failedQueue.push({ resolve, reject });
        })
          .then((token) => {
            originalRequest.headers['Authorization'] = 'Bearer ' + token;
            return api(originalRequest);
          })
          .catch((err) => Promise.reject(err));
      }
      originalRequest._retry = true;
      isRefreshing = true;
      const refreshToken = localStorage.getItem('refreshToken');
      if (!refreshToken) {
        alert('Sesi Anda telah habis. Silahkan login kembali.');
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('user');
        window.location.href = '/login';
        return Promise.reject(error);
      }
      try {
        const response = await api.post('/auth/refresh', { refreshToken });
        const { accessToken: newAccessToken } = response.data;
        localStorage.setItem('accessToken', newAccessToken);
        originalRequest.headers['Authorization'] = 'Bearer ' + newAccessToken;
        processQueue(null, newAccessToken);
        return api(originalRequest);
      } catch (err) {
        processQueue(err, null);
        alert('Sesi Anda telah habis. Silahkan login kembali.');
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('user');
        window.location.href = '/login';
        return Promise.reject(err);
      } finally {
        isRefreshing = false;
      }
    }
    return Promise.reject(error);
  }
);

export default api;



// File: ./src/services/authService.js
import api from './api';

export const register = async (userData) => {
  const response = await api.post('/auth/register', userData);
  return response.data;
};

export const login = async (credentials) => {
  const response = await api.post('/auth/login', credentials);
  const { accessToken, refreshToken, user } = response.data;
  localStorage.setItem('accessToken', accessToken);
  localStorage.setItem('refreshToken', refreshToken);
  return user;
};

export const logout = async () => {
  const refreshToken = localStorage.getItem('refreshToken');
  await api.post('/auth/logout', { refreshToken });
  localStorage.removeItem('accessToken');
  localStorage.removeItem('refreshToken');
};



